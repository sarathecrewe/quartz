{"/":{"title":"🪴 Data Analytics","content":"\n[[Week 1]]\n[[Week 2]]\n[[Week 3]]\n[[Week 4]]","lastmodified":"2023-08-16T12:08:43.38338855Z","tags":[]},"/R-Week-1":{"title":"R Week 1","content":"\n## R Data Structures\n\nWhen we perform data analysis in general we will typically use data in the form of an **analytic base table**. In an **analytic base table**, the **rows** of the table represent different **observations** and the different **variables** reported for each observation defines the **columns**\n\n![[ABT.png]]\n\nUp to now, we have discussed how we can store one value in an **object**. For example:\n\n```{r t1_1, exercise = TRUE, exercise.eval = FALSE}\nlength \u003c- 5 \nwidth \u003c- 10 \narea \u003c- length * width \narea\n```\n\nbut, storing one value in an **object** will only get us that far. We require methods to **import** data from different sources in R,  to **store** the data in R and to **manipulate** the data stored in R. \n\nTutorial 1 will focus on the different **data types** available in R.\n\nWorking with data in R involves selecting a **data structure** to hold your data and (ii) entering or importing the data into the **data structure** identified. R has a wide variety of **objects** available for holding data including **atomic vectors**, **matrices**, **arrays**, **lists** and **data frames**. When an **object** is created with a single value, R will create an **atomic vector** since R does not include a **scalar** data type.\n\n![[DataTypes.png]]\n\n## Data frame\n\nThe **analytic base table** equivalent structure in R is known as a **data frame**\n\nFor now, we will avoid the technical details of a **data frame** and rather focus on the high-level concepts. R includes several built-in data sets, some of the data sets are stored as **data frames**. To load an example data set the **function** data() can be used.   \n\n```{r t1_2, exercise = TRUE, exercise.eval = FALSE}\ndata(mtcars) # loads the data frame into the global environment\n```\n\nWe can view the first 6 observations of the **data frame** *mtcars* using the **function** `head()` or the last 6 observations of the **data frame** *mtcars* using the **function** `tail()`. Try modifying the code below to only display the first four observations of the **dataframe** `mtcars`\n\n```{r t1_3, exercise = TRUE, exercise.eval = FALSE}\nhead(x = mtcars, n = 6) # displays the first six observations\n```\n\n```{r t1_3-hint}\nhead(x = mtcars, n = 4)\n```\n\nThe **function** `str()` can be used to view the **str**ucture of an **object** \n\n```{r t1_4, exercise = TRUE, exercise.eval = FALSE}\nstr(mtcars) \n```\n\nOnce we have a **data frame** it becomes easy to calculate summary statistics, create plots or even analytical models. \n\n**Summary statistics**: The function `summary()` can be used to display the summary statistics of a **data frame**\n\n```{r t1_5, exercise = TRUE, exercise.eval = FALSE}\nsummary(mtcars) \n```\n\n**Plots**: Given a **data frame** various plots can be created, for example a histogram of the variable miles per gallon (mpg) \n\n```{r t1_6, exercise = TRUE, exercise.eval = FALSE}\nhist(mtcars$mpg)\n```\n\n**Analytical model**: Create a linear regression model using the transmission (variable am) as input and miles per gallon (mpg) as output\n\n```{r t1_7, exercise = TRUE, exercise.eval = FALSE}\nlm(mpg~am,data=mtcars)\n```\n\n## Atomic vectors\n\n### Introduction to vectors\n\nThe simplest and most common data structure in R is called a **vector**. There are two types of **vectors** in R: **atomic vectors** and **lists**. The main difference between **atomic vectors** and **lists** is that **atomic vectors** can only store data of the same type, while **lists** can be used to store data of different types. For example, an atomic vector can be used to store the grades achieved by students in this course\n\n![[AVectorExample.png|470]]\n\nVarious **functions** can be used to create **vectors** in R. The most straightforward way to create a **vector** in R is by using the **function** `c()` which stands for **combine** or **concatenate**. For example, a **vector** with four elements can be created and assigned to the object `first_vector`\n\n```{r t2_1, exercise = TRUE, exercise.eval = FALSE}\nfirst_vector \u003c- c(1,  3,  7, -0.5) # create a vector with four elements \nfirst_vector\n```\n\nTry creating a **vector** that contains the values 1,2,3,4:\n\n```{r t2_2, exercise = TRUE, exercise.eval = FALSE}\n \n```\n\n```{r t2_2-hint}\nc(1,2,3,4)\n```\n\nThe **function** `c()` can also be used to combine **vectors** to form a new vector\n\n```{r t2_3, exercise = TRUE, exercise.eval = FALSE}\nc(c(1,  2,  3),  c(4,  5,  6)) # combine the vector c(1,2,3) and c(4,5,6)\n```\n\nGiven a **vector**, it is possible to create a new **vector** where the new **vector** contains repetitions of the elements of the original **vector**. To repeat specific **elements** of a **vector** the function `rep()` which stands for **repetition** can be used\n\n```{r t2_4, exercise = TRUE, exercise.eval = FALSE}\nrep(c(1,  2),  times = 3) # repeat the vector c(1,2) three times\n```\n\nThe above example, repeats the **vector** `c(1,2)` three times. Elements of a vector can also be repeated using the *`each`* **argument** of the **function** `rep()` \n\nModify the code below to produce the **vector** c(1,2,1,2,1,2) using the *`each`* **argument** \n\n```{r t2_5, exercise = TRUE, exercise.eval = FALSE}\nrep(c(1,  2)) \n```\n\n```{r t2_5-hint}\nrep(c(1,  2),  each = 3) \n```\n\nValues can also be passed to both the `each` and `times` **arguments** of the `rep()` **function**. When values are passed to both the `each` and `times` arguments, the `each` operation is performed first. \n\nCreate the vector `c(1,1,1,2,2,2,1,1,1,2,2,2)` by filling in the blanks:\n\n```{r t2_6, exercise = TRUE, exercise.eval = FALSE,  exercise.blanks = \"___\"}\nrep(c(1,2), times = ____, each = ____) \n```\n\n```{r t2_6-solution}\nrep(c(1,2), times = 2, each = 3) \n```\n\nThe function `head()` and `tail()` can be used to obtain a preview of the values stored in a **vector**\n\nR by default includes the **character vectors** `letters` and `LETTERS`. The **vector** `letters` contain the 26 lower-case letters of the Roman alphabet, while the **vector** `LETTERS` contain the 26 upper-case letters of the Roman alphabet\n\n```{r t2_7, exercise = TRUE, exercise.eval = FALSE}\nletter\n```\n\nThe **functions** `head()` and `tail()` can be used to preview the values stored in a **vector**\n\n```{r t2_8, exercise = TRUE, exercise.eval = FALSE}\nhead(letters)\n```\n\n```{r t2_9, exercise = TRUE, exercise.eval = FALSE}\ntail(letters)\n```\n\nDisplay the last four elements of the **vector** `letters` by filling in the blanks:\n\n```{r t2_10, exercise = TRUE, exercise.eval = FALSE,  exercise.blanks = \"___\"}\ntail(letters, n = ___)\n```\n\n```{r t2_10-solution}\ntail(letters, n = 4)\n```\n\n## Type of atomic vectors\n\nThere are six types of **atomic vectors** in R: **logical**, **integer**, **double**, **character**, **complex** and **raw**. **Integer** and **double** **vectors** are collectively known as **numeric vectors**. We will only focus on **logical**, **integer**, **double** and **character** vectors in this course also referred to as the **primary** type of **atomic vectors**\n\n![[TypesofVectors.png|400]]\n\nEach **atomic vector** in R uses a special syntax to define the  **elements** of the  **vector**\n\n**Logical vectors**: can only contain the values (i) `TRUE`  or `T` and (ii)  `FALSE` or `F`\n\n```{r t2_11, exercise = TRUE, exercise.eval = FALSE}\nlogical_vector \u003c- c(T, F, TRUE, FALSE,) # Note TRUE can be abbreviated as T\n```\n\n**Character vectors** contain **elements** of type string. **Strings** are values surrounded single quotation marks `‘’` or double quotation marks `““`\n\n```{r t2_12, exercise = TRUE, exercise.eval = FALSE}\ncharacter_vector \u003c- c(\"Andrew\",  'Mike',  'John',  'Sara')\n```\n\n**Double vectors** can be specified in decimal, scientific or hexadecimal form. **Double vectors** can contain three special values: `Inf` (infinity), `-Inf` (negative infinity) and `NaN` (not a number)\n\n```{r t2_13, exercise = TRUE, exercise.eval = FALSE}\ndouble_vector \u003c- c(1.2,  1.2e3,  0xcafe,  Inf,  NaN)\n```\n\n**Integer vectors** are defined similarly to **double vectors**, but the elements must be followed by `L` and cannot contain fractions \n\n```{r t2_14, exercise = TRUE, exercise.eval = FALSE}\nint_vector \u003c- c(1L,  1.2e3L,  0xcafeL)\n```\n\n**Double vectors** and **integer vectors** are both **numeric vectors**\n\n### Properties of vectors\n\nEach **vector** has three properties: (1) a **type** (2) a **length** and (3) **attributes**: \n\n**Type**: The **type** of a **vector**, how the **object** is internally stored, can be checked using the `typeof()` function. The `typeof()` *function* determines the R internal type or storage mode of any R object \n\n```{r t2_15, exercise = TRUE, exercise.eval = FALSE}\ntypeof(letters) # letters is a builtin character vector\n```\n\n**Length**: The number of **elements** stored in a **vector** can be determined with the **function** `length()`\n\n```{r t2_16, exercise = TRUE, exercise.eval = FALSE}\nlength(letters)\n```\n\n**Attributes**: An **attribute** is a piece of information that can be attached to an **atomic vector** or any R **object**. You can think of **attributes** as `metadata` - a convenient place to store information associated with an **object**. By default an **atomic vector** does not have any **attributes** assigned to it. To display the **attributes** of an **object** the `attribute()` **function** can be used. \n\n```{r t2_17, exercise = TRUE, exercise.eval = FALSE}\nmy_vector \u003c- 1:10\nattributes(my_vector)\n```\n\nThe **object** `my_vector` does not have any **attributes** assigned to it. However, this does not mean that **attributes** cannot be assigned to an **object**. The most common attributes to give an **atomic vector** are **names**, **dimensions** and **classes**. We will only discuss **names** at this point\n\nBy default an **atomic vector** will not have a **names** **attribute** assigned to it. To check whether the **names attribute** is assigned a **vector** the **function** `names()` can be used\n\n```{r t2_18, exercise = TRUE, exercise.eval = FALSE}\nweekly_rainfall = c(10,  12,  0,  4,  0) \nnames(weekly_rainfall)\n```\n\n**Names** can be assigned to a **vector** either when a **vector** is created or using the **function** `names()`\n\n```{r t2_19, exercise = TRUE, exercise.eval = FALSE}\nweekly_rainfall = c(\"Mo\" = 10, \"Tu\" = 12, \"We\" = 0, \"Th\" = 4, \"Fr\" = 0) \nnames(weekly_rainfall) \u003c- c(\"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\")\nattributes(weekly_rainfall)\n```\n\n**Names** will not affect the actual values of the **vector**, nor will the **names** be affected when the **elements** of the **vector** are manipulated\n\nWhen you attempt to create a **vector** with different types, R will “convert” the **elements** to a compatible type of vector \n\nRecall that an **atomic vectors** can only contain **elements** of the same type. If you try to create a **vector** with different elements, R will automatically **coarse** the values to a compatible type in the order:  `logical » integer » double » character`\n\n```{r t2_20, echo=FALSE}\nquiz(question(\"R stores the vector c(TRUE,  1L) as a _ vector\",\n    answer(\"logical\"),\n    answer(\"integer\", correct = TRUE),\n    answer(\"double\"),\n    answer(\"character\"),\n    allow_retry = TRUE))\n```    \n\n```{r t2_21, echo=FALSE}\nquiz(question(\"R stores the vector c(TRUE,  1)) as a _ vector\",\n    answer(\"logical\"),\n    answer(\"integer\"),\n    answer(\"double\", correct = TRUE),\n    answer(\"character\"),\n    allow_retry = TRUE))\n```  \n\n```{r t2_22, echo=FALSE}\nquiz(question(\"R stores the vector typeof(c('a',  1))) as a _ vector\",\n    answer(\"logical\"),\n    answer(\"integer\"),\n    answer(\"double\"),\n    answer(\"character\", correct = TRUE),\n    allow_retry = TRUE))\n```\n\n### Logical vectors\n\n**Logical vectors** can contain the values `TRUE`, `FALSE` and `NA` (for “not” available). Logical vectors are typically a product of performing a logical test, for example: \n\n```{r t2_l1, exercise = TRUE, exercise.eval = FALSE}\nc(1, 2, 3) == 1\n```\n\nThe example above evaluates whether each element in the vector `c(1, 2, 3)` is equal to 1 using the comparison operator `==`. Recall that the `=` operator is reserved for assignment, instead `==` is used to determine equality \n\nR includes all the standard comparison operators : `\u003e` , `\u003e=` , `\u003c` , `\u003c=` , `!=` (not equal) and `==` (equal) \n\n```{r t2_l2, exercise = TRUE, exercise.eval = FALSE}\nc(1, 2, 3) == 1\n```\n\nTo test if two objects are exactly equal the function `identical()` can be used\n\n```{r t2_l3, exercise = TRUE, exercise.eval = FALSE}\nv1 \u003c- c(4, 4, 9, 12) \nv2 \u003c- c(4, 4, 9, 13) \nidentical(v1, v2)\n```\n\n```{r t2_l4, exercise = TRUE, exercise.eval = FALSE}\nv1 \u003c- c(4, 4, 9, 12) \nv2 \u003c- c(4, 4, 9, 12) \nidentical(v1, v2)\n```\n\nSometimes you wish to test for “nearly equal”. The function `all.equal()` test for equality with a tolerance difference of 1.5e-8\n\n```{r t2_l5, exercise = TRUE, exercise.eval = FALSE}\nv1 \u003c- c(4.00000005, 4.00000008) \nv2 \u003c- c(4.00000002, 4.00000006) \nall.equal(v1, v2)\n```\n\nIf the difference is greater than the tolerance level, the mean relative difference is returned\n\n```{r t2_l6, exercise = TRUE, exercise.eval = FALSE}\nv1 \u003c- c(4.0005, 4.0008) \nv2 \u003c- c(4.0002, 4.0006) \nall.equal(v1, v2)\n```\n\nTo evaluate more than one logical expressions the AND `\u0026` operator or the OR `|` operator can be used. For the AND `\u0026` operator both conditions must be `TRUE` to be `TRUE`\n\n```{r t2_l7, exercise = TRUE, exercise.eval = FALSE}\n(3 \u003e 5) \u0026 (4 == 4)\n```\n\nFor the OR `|` operator at least one condition must be `TRUE` to be `TRUE`\n\n```{r t2_l8, exercise = TRUE, exercise.eval = FALSE}\n(3 \u003e 5) | (4 == 4)\n```\n\nLastly a condition can be switched using the NOT `!` operator\n\n```{r t2_l9, exercise = TRUE, exercise.eval = FALSE}\n!(3 \u003e 5)\n```\n\nConsider the following code\n```{r t2_l20, exercise = TRUE, exercise.eval = FALSE}\nresult \u003c- ((111 \u003e= 111) | !(TRUE)) \u0026 ((4 + 1) == 5) # result = TRUE\n```\n\nTo understand the output of the code, run the different parts in the block below. Why is the final output return TRUE?\n\n```{r t2_l21, exercise = TRUE, exercise.eval = FALSE}\n\n```\n\nThe function `%in%` avoids the use of using the OR `|` operator excessively  \n\n```{r t2_l22, exercise = TRUE, exercise.eval = FALSE}\nc(1, 2, 3, 4) %in% c(1, 2)\n```\n\nThe function `which()` can be used to return the indices of elements that evaluate to `TRUE`\n\n```{r t2_l23, exercise = TRUE, exercise.eval = FALSE}\nwhich(c(1, 2, 3, 4) %in% c(1, 2))\n```\n\nMath operations can also be performed with logical vectors, since `TRUE = 1` and `FALSE = 0`\n\n```{r t2_l24, exercise = TRUE, exercise.eval = FALSE}\n(c(1,0,1) == 1) + 1\n```\n\nTypically use cases includes determining the proportion of elements that are **TRUE** of a **logical vector** \n\n```{r t2_l25, exercise = TRUE, exercise.eval = FALSE}\nmean(c(1, 2, 3) == 1)\n```\n\n### Character vectors\n\n**Character vectors** stores data as strings (“text”) and is typically used to store information such as names, addresses and IDs as: \n\n```{r t2_c1, exercise = TRUE, exercise.eval = FALSE}\nfirst_names \u003c- c(\"Andrew\", \"Beth\", \"Carly\", \"Dan\")\n```\n\nString operators can be performed on strings to determine useful properties, such as the length of each string:\n\n```{r t2_c2, exercise = TRUE, exercise.eval = FALSE}\nnchar(first_names)\n```\n\nNote that R uses a global string pool. This means that a unique string is only stored in memory once, reducing the amount of memory required to store duplicate strings\n\n### Numeric vectors\n\n**Numeric Vectors**, rather then using the function `c()`, can also be created with the function `seq()` which stands for sequence. The function `seq()` creates a vector which starts at the value passed to the from argument, in increments of 1, up to the value passed to the to argument. For example, a numeric vector can be created starting from 3 and ending at 10: \n\n```{r t2_n1, exercise = TRUE, exercise.eval = FALSE}\nseq(from = 3,  to = 10)\n```\n\nThe `seq()` function can also be written shorthand using the `:` operator\n\n```{r t2_n2, exercise = TRUE, exercise.eval = FALSE}\n3:10\n```\n\nThe `seq()` function will always try to create an integer vector first, if not possible a double vector will be created\n\nTo create a vector using `seq()` with increments other then 1, a value can be passed to the optional by argument of the function. For example, a vector can be created which starts at 10 up to 0 in increments of -2\n\n```{r t2_n3, exercise = TRUE, exercise.eval = FALSE}\nseq(from = 10, to = 0.2,  by = -2)\n```\n\nIn some cases you want to generate a numeric vector with a specific number of elements between two numbers. To generate a vector with a specific number of elements a value can be passed to the length.out argument of the `seq()` function. For example, a vector of length 10 can be generated as follows:\n\n```{r t2_n4, exercise = TRUE, exercise.eval = FALSE}\nseq(from = 3,  to = 10,  length.out = 10)\n```\n\nWhen performing arithmetic operations on numeric vectors, R perform element-wise operations by default \n\n```{r t2_n5, exercise = TRUE, exercise.eval = FALSE}\nc(1, 2, 3) + c(4, 5, 6) # c(1 + 4, 2 + 5, 3 + 6)\nc(1, 2, 3, 4)^2 # to the power of 2\n```\n\nWhen vectors of different lengths are used, R will recycle the shorter vector by repeating the vector to match the longer vector\n\n```{r t2_n6, exercise = TRUE, exercise.eval = FALSE}\nc(1,  1,  1,  1) * c(1,  2) # c(1*1, 1*2, 1*1, 1*2)\n```\n\nWhen the longer vector is not a multiple of the shorter vectors, R will still perform **recycling**, however a warning will be shown \n\n```{r t2_n7, exercise = TRUE, exercise.eval = FALSE}\nc(1,  1,  1,  1) * c(1,  2,  3) # c(1*1, 1*2, 1*3, 1*1)\n```\n\nSome functions perform operations on an entire vector as oppose to working **element-wise**\n\n```{r t2_n8, exercise = TRUE, exercise.eval = FALSE}\nsum(c(1,2,3,4))\n```\n\n```{r t2_n9, exercise = TRUE, exercise.eval = FALSE}\nmax(c(1,2,3,4))\n```\n\nSome other useful functions includes: `min()` , `median()`, `sd()` and `var()`\n\nSometimes operations will produce `Inf` (positive infinity), `-Inf` (negative infinity) or `NaN` (Not a Number) as a result from a calculation\n\n```{r t2_n10, exercise = TRUE, exercise.eval = FALSE}\nc(-2,  -1,  0,  1,  2)/0\n```\n\nTo determine whether a function is `Inf` or `–Inf` the function `is.infinite()` can be used\n\n```{r t2_n11, exercise = TRUE, exercise.eval = FALSE}\nis.infinite(c(-2, -1, 0,  1,  2)/0)\n```\n\nTo determine whether a function is `NaN` the function `is.nan()` can be used\n\n```{r t2_n12, exercise = TRUE, exercise.eval = FALSE}\nis.na(c(-2, -1,  0,  1,  2)/0)\n```\n\nWe can combine functions to perform common operations on numeric vectors. For instance some models expect all values to be within the range 0 to 1. To convert values to the range 0 to 1, normalisation can be used $X_{normalised} = \\frac{X- X_{min}}{X_{max}-X_{min}}$\n\n```{r t2_n13, exercise = TRUE, exercise.eval = FALSE}\nx \u003c- c(0, 2, 55, 23, 20, 48, 76) \n(x - min(x)) / (max(x) - min(x))\n```\n\n### Subsetting vectors\n\nElements of a vector can be selected, subset, in a several ways. To illustrate subsetting consider the vector\n\n```{r t2_s1, exercise = TRUE, exercise.eval = FALSE}\nfirst_names \u003c- c(\"Andrew\", \"Beth\", \"Carly\", \"Dan\")\n```\n\n**Option 1** Passing a single index or vector of entries to keep using [ ]\n\n```{r t2_s2, exercise = TRUE, exercise.eval = FALSE}\nfirst_names \u003c- c(\"Andrew\", \"Beth\", \"Carly\", \"Dan\")\nfirst_names[c(1,4)]\n```\n\n**Option 2** Passing a single index or vector of entries to drop using [-]\n\n```{r t2_s3, exercise = TRUE, exercise.eval = FALSE}\nfirst_names \u003c- c(\"Andrew\", \"Beth\", \"Carly\", \"Dan\")\nfirst_names[-c(1,4)] # or first_names[c(-1, -4)]\n```\n\n**Option 3** Passing a logical vector of entries to keep (TRUE) and entries to drop (FALSE) using []\n\n```{r t2_s4, exercise = TRUE, exercise.eval = FALSE}\nfirst_names \u003c- c(\"Andrew\", \"Beth\", \"Carly\", \"Dan\")\nfirst_names[nchar(first_names) \u003e 4]\n```\n\nNote that if the logical vector passed is of a different length than the vector to be subset, recycling will be applied\n\n```{r t2_s5, exercise = TRUE, exercise.eval = FALSE}\nfirst_names \u003c- c(\"Andrew\", \"Beth\", \"Carly\", \"Dan\")\nfirst_names[c(TRUE, FALSE)]\n```\n\n**Option 4** Names can be assigned to a vector when a vector is created or using the function `names()`. Once names are defined, names can be used to subset a vector\n\n```{r t2_s6, exercise = TRUE, exercise.eval = FALSE}\nweekly_rainfall = c(\"Mo\" = 10, \"Tu\" = 12, \"We\" = 0, \"Th\" = 4, \"Fr\" = 0) # option 1 \nnames(weekly_rainfall) \u003c- c(\"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\") # option 2 \nweekly_rainfall\nweekly_rainfall[c(\"Mo\", \"Tu\")]\n```\n\n### Missing values\n\nMost data sets will contain missing values. R use the encoding `NA` (not available), without quotes, to represent missing values \n\n```{r t2_m1, exercise = TRUE, exercise.eval = FALSE}\nvector_with_missing \u003c- c(1, 2, 3, NA, 4, 5, 6, NA)\n```\n\nWhen you try to apply operations to vectors with `NA` values, most functions will return an error or simply `NA`\n\n```{r t2_m2, exercise = TRUE, exercise.eval = FALSE}\nmean(vector_with_missing)\n```\n\nIn some functions, the optional argument `na.rm = TRUE` can be used to ignore the `NA` values in calculations\n\n```{r t2_m3, exercise = TRUE, exercise.eval = FALSE}\nmean(vector_with_missing, na.rm = TRUE)\n```\n\nMost operations that involve missing values will simply return a missing value. After all, R has “no idea” what the missing value represents \n\n```{r t2_m4, exercise = TRUE, exercise.eval = FALSE}\nNA \u003e 3\n```\n\nSimilarly testing whether two missing values are equal with return `NA`\n\n```{r t2_m5, exercise = TRUE, exercise.eval = FALSE}\nNA == NA # R has no idea if the two missing values are the same value\n```\n\nWhen the actual value represented by `NA` is not important, R can return a non-NA output\n\n```{r t2_m6, exercise = TRUE, exercise.eval = FALSE}\nNA^0 # returns 1 \nNA | TRUE # return TRUE \nNA \u0026 FALSE # return FALSE\n```\n\nTo test whether a specific element of a vector is missing the `is.na()` function can be used\n\n```{r t2_m7, exercise = TRUE, exercise.eval = FALSE}\nvector_with_missing \u003c- c(1, 2, 3, NA, 4, 5, 6, NA) \nis.na(vector_with_missing)\n```\n\nThe `is.na()` function can also be used to create a subset of a vector that excludes missing values\n\n```{r t2_m8, exercise = TRUE, exercise.eval = FALSE}\nvector_with_missing[!is.na(vector_with_missing)]\n```\n\n## Matrices and Arrays\n\nA **matrix** extends the idea of vectors into two dimensions: rows and columns. A simple way of thinking of a matrix is the simple reordering of the values of a vector into two dimensions where all rows of the matrix are the same length\n\n![[Matrix.png]]\n\nElements of a vector can also be arranged in more than two dimensions, known as an **array**. For example, a colour image is typically represented as a three-dimensional array. As with atomic vectors, all the elements of an array and matrix must be of the same type. \n\n![[Array.png]]\n\n### Creating matrices\n\nA matrix can be directly constructed using the `matrix()` function. The `byrow` argument of the `matrix()` function determines whether the data fill is by row or by column\n\n\n```{r t4_1, exercise = TRUE, exercise.eval = FALSE}\nmatrix(1:9,  nrow = 3) # create a matrix with 3 rows\n```\n\n```{r t4_2, exercise = TRUE, exercise.eval = FALSE}\nmatrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) # create a matrix with 3 rows\n```\n\nR will try to construct a matrix even if it means that elements of the vector used to construct the matrix is repeated or dropped. R will not necessarily show a warning message if elements are repeated or dropped \n\n```{r t4_3, exercise = TRUE, exercise.eval = FALSE}\nmatrix(1:5, nrow = 2)\n```\n\n```{r t4_4, exercise = TRUE, exercise.eval = FALSE}\nmatrix(1:6, nrow = 2, ncol = 2)\n```\n\nA matrix can also be created by binding vectors together with the function `rbind()` which stands for row bind or `cbind()` which stands for column bind \n\n```{r t4_5, exercise = TRUE, exercise.eval = FALSE}\nrbind(c(1, 2, 3), c(4, 5, 6)) # Bind rows to form a matrix\n```\n\n```{r t4_6, exercise = TRUE, exercise.eval = FALSE}\ncbind(c(1, 2), c(3, 4), c(5, 6)) # Bind columns to form a matrix\n```\n\nVectors used to construct a matrix must be of the same length. If vectors of different lengths are provided, R will recycle the elements of the shorter vector(s) \n\n```{r t4_7, exercise = TRUE, exercise.eval = FALSE}\ncbind(c(1, 2), c(3))\n```\n\nAs with atomic vectors, all the elements of a matrix must be of the same type. If a matrix is constructed with elements of different types, R will coarse the elements to the same type \n\n```{r t4_8, exercise = TRUE, exercise.eval = FALSE}\ncbind(c(\"1\", \"2\"), c(3, 4))\n```\n\nThe functions `cbind()` and `rbind()` can also be used to extend existing matrices. Again, keep in mind the length and type of the “added” vectors\n\n```{r t4_9, exercise = TRUE, exercise.eval = FALSE}\nsquare_matrix \u003c- matrix(c(1, 1, 1, 1), nrow = 2) \ncbind(square_matrix, c(2, 2))\n```\n\n```{r t4_10, exercise = TRUE, exercise.eval = FALSE}\nsquare_matrix \u003c- matrix(c(1, 1, 1, 1), nrow = 2) \ncbind(square_matrix, c(\"2\")) # repeat + coarse\n```\n\nThe diagonal of a matrix can be obtained by using the `diag()` function\n\n```{r t4_11, exercise = TRUE, exercise.eval = FALSE}\ndiag(matrix(c(1, 0, 0, 1),  nrow = 2))\n```\n\nThe diag() function can also be used to construct a diagonal matrix, such as the identify matrix\n\n```{r t4_12, exercise = TRUE, exercise.eval = FALSE}\ndiag(x = 1, nrow = 3) # x is used to specify the value that is used to fill the diagonal\n```\n\n### Properties of matrices\n\nRecall that an atomic vector has three properties: (i) a **type**, (ii) a **length** and (iii) **attributes**. A matrix has the same three properties as an atomic vector but includes some unique attributes\n\n**Type**: To verify how a matrix is internally stored, the `typeof()` function can be used\n\n```{r t4_13, exercise = TRUE, exercise.eval = FALSE}\ntypeof(matrix(c(1, 1, 1, 1), nrow = 2))\n```\n\nInternally R simply stores the matrix defined in the example above as “double” \n\n**Length** The number of elements stored in a matrix can be determined with the function `length()`\n\n```{r t4_14, exercise = TRUE, exercise.eval = FALSE}\nlength(matrix(c(1, 1, 1, 1), nrow = 2))\n```\n\n**Attributes**: By default, an atomic vector has no attributes assigned to it \n```{r t4_15, exercise = TRUE, exercise.eval = FALSE}\nmy_vector \u003c- 1:20 \nattributes(my_vector)\n```\n\nTo transform an atomic vector into a matrix or array, the dimension dim() attribute of the vector can be set \n\n```{r t4_16, exercise = TRUE, exercise.eval = FALSE}\ndim(my_vector) \u003c- c(4,5) # rearrange the vector into 4 rows and 5 columns \nmy_vector\n```\n\nTo verify that the “transformed” vector is indeed a matrix the attribute class can be checked\n```{r t4_17, exercise = TRUE, exercise.eval = FALSE}\nmy_vector \u003c- 1:20 \ndim(my_vector) \u003c- c(4, 5) # assign values to the dim() attribute of my_vector\nclass(my_vector)\n```\n\nThe `class` attribute helps us understand the type of R object, while typeof specifies how the object is stored internally\n\n```{r t4_18, exercise = TRUE, exercise.eval = FALSE}\ntypeof(my_vector)\n```\n\nLike vectors, names can be assigned to each element of a matrix. However, it is much more common to assign names to the rows and columns of a matrix. The function rownames() and colnames() can be used to set the names of the rows and columns of a matrix\n\n```{r t4_19, exercise = TRUE, exercise.eval = FALSE}\nnew_hope \u003c- c(461, 314) \nempire_strikes \u003c- c(291, 248) \nreturn_jedi \u003c- c(301, 166) \nbox_office \u003c- rbind(new_hope, empire_strikes, return_jedi) \ntitles \u003c- c(\"A New Hope\", \"The Empire Strikes Back\", \"Return of the Jedi\") \nrownames(box_office) \u003c- titles \nregion \u003c- c(\"US\", \"non-US\") \ncolnames(box_office) \u003c- region \nbox_office\n```\n\nAssume we have three numeric vectors of length two, where each numeric vector represents a Star Wars movie and the elements the US box office revenue and the Non-US box office revenue. We can combine the three numeric vectors using `rbind()` into a matrix box_office \n\n```{r t4_20, exercise = TRUE, exercise.eval = FALSE}\nnew_hope \u003c- c(461, 314) \nempire_strikes \u003c- c(291, 248) \nreturn_jedi \u003c- c(301, 166) \nbox_office \u003c- rbind(new_hope, empire_strikes, return_jedi)\n```\n\nUsing `rbind()` will automatically assign the names of the vectors to the rownames attribute of the matrix box_office\n\n```{r t4_21, exercise = TRUE, exercise.eval = FALSE}\nnew_hope \u003c- c(461, 314) \nempire_strikes \u003c- c(291, 248) \nreturn_jedi \u003c- c(301, 166) \nbox_office \u003c- rbind(new_hope, empire_strikes, return_jedi)\nrownames(box_office)\n```\n\nTo view the attributes assigned to an object the function `attributes()` can be used\n\n```{r t4_22, exercise = TRUE, exercise.eval = FALSE}\nmy_matrix \u003c- matrix(c(1, 1)) \nattributes(my_matrix)\n```\n\n```{r t4_23, exercise = TRUE, exercise.eval = FALSE}\nmy_matrix \u003c- matrix(c(1, 1)) \nrownames(my_matrix) \u003c- c(\"row 1\", \"row 2\" # adds the attribute dimnames\nattributes(my_matrix)\n```\n\n### Matrix calculations\n\nMath operations are performed on matrices entry-wise given that the matrices are of the same dimensions \n\n```{r t4_24, exercise = TRUE, exercise.eval = FALSE}\n(matrix(c(1, 1, 1, 1),  nrow = 2) + matrix(c(1,  1,  1, 1),  nrow = 2)) * 2\n```\n\nHowever, using matrices of different dimensions will result in an error\n\n```{r t4_25, exercise = TRUE, exercise.eval = FALSE}\nmatrix(c(1, 1, 1, 1),  nrow = 2) + matrix(c(1,  1, 1, 1, 1, 1),  nrow = 2) \n```\n\nActual matrix multiplication (not-entry wise) is performed using the %*% operator\n\n```{r t4_26, exercise = TRUE, exercise.eval = FALSE}\nmatrix(c(1, 1, 1, 1),  nrow = 2) %*% matrix(c(2, 2),  nrow = 2) \n```\n\nWhen matrix multiplication is performed with matrices of incompatible dimensions an error will be generate \n\n```{r t4_27, exercise = TRUE, exercise.eval = FALSE}\nmatrix(c(1, 1, 1, 1),  nrow = 2) %*% matrix(c(2, 2),  ncol = 2)\n```\n\nThe transpose of a matrix can be computed using the function `t()` for transpose. Recall that the transpose of a matrix is \n\n```{r t4_28, exercise = TRUE, exercise.eval = FALSE}\ntest_matrix = matrix(1:6,  nrow = 2)\nt(test_matrix)\n```\n\nTo invert a matrix, use the function `solve()`\n\n```{r t4_29, exercise = TRUE, exercise.eval = FALSE}\nmy_matrix \u003c- matrix(c(22, 49, 28, 64), nrow = 2) \nmy_matrix_inv \u003c- solve(my_matrix) \nmy_matrix_inv\n```\n\nNote however if we try to check whether the invert hold, the off-diagonals of the result are not exactly zero \n\n```{r t4_30, exercise = TRUE, exercise.eval = FALSE}\nmy_matrix %*% my_matrix_inv\n```\n\n### Subsetting matrices\n\nA matrix can be subset in a similar way as a vector. Instead of vectors, the index \\[rows, columns] is used:\n\n```{r t4_31, exercise = TRUE, exercise.eval = FALSE}\nchar_matrix \u003c- matrix(letters,  nrow = 2,  ncol = 2) \nchar_matrix\n```\n\n```{r t4_32, exercise = TRUE, exercise.eval = FALSE}\nchar_matrix \u003c- matrix(letters,  nrow = 2,  ncol = 2) \nchar_matrix[2, 2] # subset row 2 column 2\n```\n\n```{r t4_33, exercise = TRUE, exercise.eval = FALSE}\nchar_matrix \u003c- matrix(letters,  nrow = 2,  ncol = 2) \nchar_matrix[, 2] # keep all rows, subset column 2\n```\n\nIf the columns or rows of a matrix has names assigned to it, the rownames or colnames can be used to subset a matrix\n\n```{r t4_34, exercise = TRUE, exercise.eval = FALSE}\ntest_matrix \u003c- matrix(1:6, nrow = 3) \nrow.names(test_matrix) \u003c- c(\"a\", \"b\", \"c\") \ntest_matrix[c(\"a\",\"c\"),]\n```\n\nIn the previous example, we saw that R returns a vector if a matrix ends up having just one row or column after subsetting \n\n```{r t4_35, exercise = TRUE, exercise.eval = FALSE}\nchar_matrix \u003c- matrix(letters,  nrow = 2,  ncol = 2) \nchar_matrix[, 2]\n```\n\nTo prevent the behaviour the optional argument drop should be set to FALSE\n\n```{r t4_36, exercise = TRUE, exercise.eval = FALSE}\nchar_matrix \u003c- matrix(letters,  nrow = 2,  ncol = 2) \nchar_matrix[, 2,  drop = FALSE]\n```\n\n## Lists\n\nA **list** in R can be used to store objects of multiple types. Storing objects of multiple types makes lists extremely versatile. A good analogy is to think of a list as your to-do list: items in your to-do list will likely differ in length, characteristics, and the type of activity that has to be done. For example, we can use a list to store a single value, a numeric vector and a matrix\n\n![[List.png|500]]\n\nThe results of models are often returned as a list; therefore it is critical to understand how to work with lists\n\n### Creating lists\n\nTo create a list the function `list()` can be used\n\n```{r t5_1, exercise = TRUE, exercise.eval = FALSE}\nlist(5,  c(1:4),  matrix(c(1:4),  nrow = 2))\n```\n\n- the value `5` is stored in the first index of the list\n- the numeric vector `c(1:4)` is stored in the second index of the list\n- the matrix `matrix(c(1:4), nrow = 2)` is stored in the third index of the list\n\nlist can contain different data objects of different data types\n\n```{r t5_2, exercise = TRUE, exercise.eval = FALSE}\nmy_list \u003c- list(TRUE, c(1:4), matrix(c(\"a\", \"b\", \"c\", \"d\"), nrow = 2)) \nstr(my_list)\n```\n\nIn the above example, we create a list containing (i) an atomic vector of type logical with a single element, (ii) an atomic vector of type integer with four elements and (iii) a matrix of type character with four elements \n\nLists are very versatile data structures capable of storing any data object. For example, a list can be used to store a list  \n\n```{r t5_3, exercise = TRUE, exercise.eval = FALSE}\nchild_list \u003c- list(TRUE, c(1:4), matrix(c(\"a\", \"b\", \"c\", \"d\"), nrow = 2)) \nparent_list \u003c- list(child_list, c(1:4)) \nstr(parent_list)\n```\n\nIn the above example, we create a list named `parent_list` which stores a list in the first element and an atomic vector in the second element\n\n### Extending lists\n\nIf we try to add an list to an existing list using the function list(), R will add the existing list as an element to the current list\n\n```{r t5_4, exercise = TRUE, exercise.eval = FALSE}\nl1 \u003c- list(1:3, \"a\", c(TRUE, FALSE, TRUE)) \nl2 \u003c- list(l1, c(2.5, 4.2)) \nstr(l2)\n```\n\nTo extend a list with a different list, simply use the function `append()`\n\n```{r t5_5, exercise = TRUE, exercise.eval = FALSE}\nl1 \u003c- list(1:3, \"a\", c(TRUE, FALSE, TRUE)) \nl2 \u003c- append(l1, c(2.5, 4.2)) \nstr(l2)\n```\n\n### Properties of lists\n\nRecall that an atomic vector has three properties: (i) a **type**, (ii) a **length** and (iii) **attributes**. A list has the same three properties as an atomic vector but includes some unique attributes\n\n**Type**: The data type of a list is a list. Recall that a list is a type of vector that R internally store as the data type list \n\n```{r t5_6, exercise = TRUE, exercise.eval = FALSE}\nmy_list = list(first_thing = 55, second_thing = c(60, 42)) \ntypeof(my_list)\n```\n\n**Length**: The length of a list is simply the number of elements in the list\n\n```{r t5_7, exercise = TRUE, exercise.eval = FALSE}\nmy_list = list(first_thing = 55, second_thing = c(60, 42)) \nlength(my_list)\n```\n\n**Attributes**: Like atomic vectors, names can also be assigned to the elements of a list. Names can be assigned to the elements of a list when the list is created or by using the function names() \n\n```{r t5_8, exercise = TRUE, exercise.eval = FALSE}\nmy_list = list(first_thing = 55,  second_thing = c(60,42),  third_thing = c(\"a\",  \"b\")) \nnames(my_list)\n```\n\n```{r t5_9, exercise = TRUE, exercise.eval = FALSE}\nmy_list = list(first_thing = 55,  second_thing = c(60,42),  third_thing = c(\"a\",  \"b\")) \nnames(my_list)\n```\n\n### Subsetting lists\n\nThere are three subsetting operators `[[`, `[` and `$` that can be used to subset a list. When thinking of how to subset a list it is often useful to think of a list as a train where each carriage of the train is an element of the list. Since the elements of a list can be named, the carriages of the train can be assigned names\n\n![[Train.png]]\n\n“If list x is a train (list) carrying objects, then `x[[2]]` is the object in car 2; `x[c(1:2)]` is a train (list) of cars 1-2” - @RLangTip\n\nIn other words, single brackets `[]` is used to select one or more elements from a list as a list, while double brackets `[[]]` are used to select the elements of a list \n\nTo obtain the actual elements stored in a list use double brackets `[[ ]]`\n\n```{r t5_10, exercise = TRUE, exercise.eval = FALSE}\nmy_list \u003c- list(5,  c(1:4),  matrix(c(1:4),  nrow = 2)) \nmy_list[[2]]\n```\n\nWhen single brackets `[ ]` is used to access list elements a list is returned instead \n\n```{r t5_11, exercise = TRUE, exercise.eval = FALSE}\nmy_list \u003c- list(5,  c(1:4),  matrix(c(1:4),  nrow = 2)) \nmy_list[1]\n```\n\nSingle brackets are useful to obtain multiple elements stored in the list, since double brackets cannot be used to select multiple elements from the list\n\n![[List1.png]]\n\n![[List2.png]]\n\nGiven a list with names, the names can be used to select elements of a list either by (i) using the name and double brackets `[[ ]]` or using a `$` followed by the name \n\n```{r t5_12, exercise = TRUE, exercise.eval = FALSE}\nmy_list = list(first_thing = 55,  second_thing = c(60,42),  third_thing = c(\"a\",  \"b\")) \nmy_list[[\"first_thing\"]] # or try my_list$first_thing\n```\n\nSubsetting can be used to extend a list. For example, we can assign an object to an element of a list that does not exist  \n\n```{r t5_13, exercise = TRUE, exercise.eval = FALSE}\nl1 \u003c- list(c(1,1)) \nl1[3] \u003c- TRUE \nstr(l1)\n```\n\nor by adding a new named element\n\n```{r t5_14, exercise = TRUE, exercise.eval = FALSE}\nl1 \u003c- list(c(1,1)) \nl1$\"New element\" \u003c- TRUE \nstr(l1)\n```\n\n## Dataframes\n\nA **data frame** stores data in a **list** of **equal length vectors**. Each **element** of the **list** can be thought of as a column and the **length** of each element of the **list** is the number of rows. Since a data frame consist of a **list**, a data frame can store different types of data i.e. **numeric**, **logical**, **character** … in each column\n\n![[Dataframe.png|540]]\n\n### Creating a data frame\n\nIn most cases, we will create a data frame by importing a data set from an external source. However, data frames can also be created explicitly using the function `data.frame()`. Run the code below to create a data frame with three rows and four columns\n\n\n```{r t6_1, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = 1:3, \n                 col2 = c(\"this\", \"is\", \"text\"), \n                 col3 = c(TRUE, FALSE, TRUE), \n                 col4 = c(2.5, 4.2, pi)) \nstr(df)\n```\n\n- If you do not provide names for the columns of a data frame, R will assign custom column names but it is not recommended. \n- In addition, avoid using duplicate column names\n\nThe elements of a data frame should be of equal length. Try running the code below; you should get an error that the number of rows differs\n\n```{r t6_2, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 2, 3), col2 = c(1, 2))\n```\n\nR will only perform recycling when an atomic vector of length 1 is provided but is best avoided. Note that R will automatically **recycle** the value provided for column 2\n\n```{r t6_3, exercise = TRUE, exercise.eval = FALSE}\ndata.frame(col1 = c(1,2,3), col2 = c(1))\n```\n\nApart from atomic vectors, matrices and lists can be used to construct a data frame, but when lists are used the elements must be of the equal length. \n\n```{r t6_4, exercise = TRUE, exercise.eval = FALSE, exercise.cap = \"Create a data frame from a matrix\"}\ndata.frame(matrix(c(1, 2, 3, 4), nrow = 2, dimnames = list(NULL, c(\"a\", \"b\"))))\n```\n\n```{r t6_5, exercise = TRUE, exercise.eval = FALSE, exercise.cap = \"Create a data frame from a list\"}\ndata.frame(list(\"col1\" = c(1, 2, 3), \"col2\" = c(1, 2, 3)))\n```\n\n### Extending data frames\n\n**Columns**: Columns can be added to a data frame using the function `cbind()`. Note that when using `cbind()` one of the objects being combined must be a data frame otherwise a matrix is created\n\n```{r t6_6, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 2), col2 = c(3, 4)) \ncbind(df, col3 = c(5, 6))\n```\n\n**Rows**: Rows can be added to a data frame using the function `rbind()`. However, when adding rows to a data frame the data type of columns can change. R will **coarse** all values to a compatible data type\n\n```{r t6_7, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 2), col2 = c(3, 4)) \ndf \u003c- rbind(df, c(\"1\", \"2\")) \nstr(df)\n```\n\n### Properties of data frames\n\nAn atomic vector has three properties: (i) a **type**, (ii) a **length** and (iii) **attributes**. A data frame has the same three properties as an atomic vector but includes some unique **attributes**\n\n**Length:** The length of a data frame is the number of columns of the data frame\n\n```{r t6_8, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 2), col2 = c(3, 4)) \nlength(df)\n```\n\n**Data Type:** The data type of a data frame is a list. R stores a data frame as a list with some special conditions\n\n```{r t6_9, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 2), col2 = c(3, 4)) \ntypeof(df)\n```\n\n**Attributes**: Data frames can have additional attributes such as row names and column names \n\n```{r t6_10, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 2), col2 = c(3, 4)) \nattributes(df)\n```\n\nRow names can be added or changed using the function `rownames()`. Column names can be changed using the function `colnames()` or the function `names()`\n\n\n### Subsetting data frames\n\nIf you subset a data frame using a single index \\[columns], a data frame behave like a list and return the selected columns with all rows as a data frame\n\n```{r t6_11, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 1), col2 = c(2, 2), col3 = c(3, 3)) \ndf[1]\n```\n\n```{r t6_12, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 1), col2 = c(2, 2), col3 = c(3, 3)) \ndf[c(\"col1\", \"col3\")]\n```\n\nSince the subsetting of a data frame behave like lists, double brackets [[ ]] or a $ followed by the name of a column can be used to select the elements of the data frame. As with list, the result is returned as the most simplified data type i.e. an atomic vector and not a data frame  \n\n```{r t6_13, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 1), col2 = c(2, 2), col3 = c(3, 3)) \ndf[[\"col1\"]]\n```\n\n```{r t6_14, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 1), col2 = c(2, 2), col3 = c(3, 3)) \ndf$col1\n```\n\nIf you subset a data frame using two vectors i.e. \\[rows, columns], a data frame behaves like a matrix and return the selected rows and columns as the most simplified data structure by default \n\n\n```{r t6_15, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 1), col2 = c(2, 2), col3 = c(3, 3)) \ndf[1, c(1, 2)] # return row 1 and column 1 and 2\n```\n\n```{r t6_16, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 1), col2 = c(2, 2), col3 = c(3, 3)) \ndf[, 1] # returns a vector\n```\n\n```{r t6_17, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 1), col2 = c(2, 2), col3 = c(3, 3)) \ndf[, 1,  drop = FALSE] # returns a data frame\n```\n\nThe rows of a data frame can also be selected using logical vectors. For example, using the built-in data frame cars  \n\n```{r t6_18, exercise = TRUE, exercise.eval = FALSE}\ncars[cars$speed == 24,]\n```\n\n```{r t6_19, exercise = TRUE, exercise.eval = FALSE}\ncars[cars$speed == 24, \"dist\",  drop = FALSE]\n```\n","lastmodified":"2023-08-16T12:08:43.38338855Z","tags":[]},"/R-Week-2":{"title":"R Week 2","content":"\n## ggplot2\n\n### Overview\n\nThe **package** `ggplot2`, which forms part of the `tidyverse`, offers a powerful graphics language for creating elegant and complex plots. In this lesson we will cover how various types of plots can be created using the `ggplot2` **package**\n\nSince the `ggplot2` **package** forms part of the `tidyverse`, you do not have to **install** the **package** if you have **installed** the `tidyverse` **package** previously. However, if you would like to **install** the **package**, the **function** `install.packages()` can be used\n\n```{r InstallGGPlot, eval=FALSE, echo=TRUE, exercise=FALSE}\ninstall.packages(\"ggplot2\")\n```\n\nOnce the **package** is installed, the **package** can be **loaded** using the **function** `library()`\n\n```{r Load_GGPLOT, exercise=TRUE}\nlibrary(ggplot2) \n```\n\n---\n\nThe design of `ggplot2` is based on the idea that any complex plot can be divided into **layers**. For example, a scatterplot and smoothed regression line can be combined to summarise the relationship between two continuous features\n\n\n![[assets/Combine.png]]\n\n\n---\n\n## Primary components of a plot\n\n### Layers and aesthetics\n\n`ggplot2` graphic __objects__ consist of two primary components __layers__ and __aesthetics__:\n\n1. __Layers__ are the components of a graph\n    - For example, the __layer__ `geom_point()` adds a __layer__ of scatterplot points\n    - Additional __layers__ can be added to a ggplot2 graphic __object__ by using the `+` __operator__ is e.g. `ggplot() + geom_point()`\n\n2. __Aesthetics__ determine how __layers__ appear e.g. we can use __aesthetics__ to specify the colour of the points in a `geom_point()` __layer __\n    - Aesthetics are set using __arguments__ inside a __layer function__       e.g. `geom_point(color = “red”)`\n    - __Aesthetics__ includes location, colours and sizes\n\n---\n\n### Aesthetics: Setting versus mapping\n\nEach layer has several __arguments__ that can be used to control the __appearance__ of a __layer__. When deciding how a __layer__ should appear, we first have to decide if the __appearance__ should be based on a __variable__ or not. An __aesthetic__ i.e. colour can be: \n\n1. __set__ to a constant value\n\n```{r fig.height=3, fig.width=3, error = TRUE}\nggplot(mtcars, \n       aes(x = disp, y = mpg)) +\n  geom_point(colour = \"purple\") + \n  labs(x = \"Displacement\", \n       y = \"Milles/gallon\",\n       title = \"Setting aesthetic\")\n```\n\n2. or __mapped__ to a variable i.e. transmission\n\n```{r fig.height=3, fig.width=4.3, error = TRUE}\nggplot(mtcars, aes(x = disp, y = mpg, colour = as.factor(am))) +\n  geom_point() +\n  labs(x = \"Displacement\", \n       y = \"Milles/gallon\",\n       title = \"Mapping aesthetic\",\n       colour = \"Transmission\") +\n  scale_color_brewer(palette = \"Dark2\")\n```\n\n1. __Setting aesthetics__: __Arguments__ like colour, size, line type, shape, fill and alpha can be passed directly to a __layer__. These __aesthetics__ are not influenced by data. For example, we can specify that all points in a scatterplot should be purple\n\n2. __Mapping aesthetics__: __Mapping aesthetics__ depend on data. For example, if we want the points in a scatterplot to have a different colour based on the values of a variable a __mapping aesthetic__ is required. Mapping aesthetics are specified inside the `aes()` __argument__\n\n\n![[Aesthetic example.png]]\n\n## Creating a basic plot\n\n### Loading data\n\nTo illustrate how we can create visualisations using `ggplot2` we will be using data from the Gapminder project. We will be specifically focusing on the life expectancy of different countries. \n\nThe Gapminder data can be accessed by __installing__ the __package__ `gapminder`\n\n```{r InstallGapminder, eval=FALSE, echo=TRUE, exercise=FALSE}\ninstall.packages(\"gapminder\")\n```\n\nAfter __installing__ the `gapminder` __package__, __load__ the __package__ using the __function__ `library()`\n\n```{r Load_Gapminder, exercise=TRUE}\nlibrary(gapminder) \n```\n\nOnce the __package__ is __loaded__ the data set will be stored in the __object__ `gapminder`. The __function__ `str()` can be used to view the structure of the `data` __object__\n\n```{r View_Gapminder, exercise=TRUE}\nstr(gapminder) \n```\n\nThe `gapminder` object is a __tibble__; a special kind of __data frame__ with 1704 rows and 6 columns. \n\n---\n\n### Painting\n\nThe first step in creating a `ggplot2` graphics __object__ is to define a `ggplot` __object__ using the __function__ `ggplot()`. The __function__ `ggplot()` simply creates  a blank canvas. This blank canvas can be used to add graphical elements to. Run the code below to view the blank canvas\n\n```{r Base, exercise=TRUE}\nggplot()\n```\n\n__Adding a layer__\n\nWe can add layers to our blank canvas using the `+` operator. For instance we can add a `geom_point` __layer__ to our initial blank slate created with the __function__ `ggplot()`. \n\n```{r Base1, exercise=TRUE}\nggplot() + \n  geom_point()\n```\n\nSince we have not specified the data that we want to plot or how we want our data to be plotted, our canvas will remain blank.\n\n__Adding data__\n\nTo specify what data to use in our plot, the __argument__ `data` should be set. Passing a data set to the __argument__ `data` is however not enough, we need to inform `ggplot2` how we want our data to __map__ to the plot. \n\nInside the __function__ `aes()`, we specify the values that should be used for the x and y axis. \n\nTry plotting the life expectancy i.e. `lifeExp` of South Africa over time i.e. `year` modifying the code below:\n\n```{r Base2, exercise=TRUE, exercise.blanks = \"___+\"}\nggplot() + \n  geom_point(data = gapminder[gapminder$country == \"South Africa\",1:6], \n             aes(x = ___, y = ___))\n```\n\n```{r Base2-solution}\nggplot() + \n  geom_point(data = gapminder[gapminder$country == \"South Africa\",1:6], \n             aes(x = year, y = lifeExp)) \n```\n\nThe __layer__ `geom_point`, mapped each data instance to a point on the graph. \n\n__Adding a layer__\n\nIf we wanted to add a line graph to our existing `ggplot2` graphics __object__, we can simply add a new __layer__. In this case we use the `geom_line` __layer__, a __layer__ that connect data points with a line. Add the layer `geom_line` in the code below\n\n```{r Base3, exercise=TRUE, exercise.blanks = \"___+\"}\nggplot() + \n  geom_point(data = gapminder[gapminder$country == \"South Africa\",1:6], \n             aes(x = year, y = lifeExp)) +\n  ___(data = gapminder[gapminder$country == \"South Africa\",1:6], \n             aes(x = year, y = lifeExp))\n```\n\n```{r Base3-solution}\nggplot() + \n  geom_point(data = gapminder[gapminder$country == \"South Africa\",1:6], \n             aes(x = year, y = lifeExp)) +\n  geom_line(data = gapminder[gapminder$country == \"South Africa\",1:6], \n             aes(x = year, y = lifeExp))\n```\n\nNew __layers__ will always be drawn over previous __layers__. \n\n__Avoid work; inherit__\n\nIt seems rather tedious to specify the __data__ and the __aesthetics__ for each __layer__. \n\nTo avoid repetitive code, any __mapping aesthetic arguments__ specified in the `ggplot` __layer__, will be inherited by subsequent __layers__. The code below produces the same plot as the code in the previous block; with less typing\n\n```{r Base4, exercise=TRUE, exercise.blanks = \"___+\"}\nggplot(data = gapminder[gapminder$country == \"South Africa\",1:6], \n       aes(x = year, y = lifeExp)) + \n  geom_point() + \n  geom_line() \n```\n\nThis does not imply that we cannot overwrite the __arguments__ in subsequent __layers__.\n\n## Adding flavour \n\n### Colour\n\nIf we want to change the colour of the line graph we can simply __set__ the colour __aesthetic__ equal to the value “blue”. \n\nTry changing the colour of the line to blue; without changing the colour of the points \n\n```{r Base5, exercise=TRUE, exercise.blanks = \"___+\"}\nggplot(data = gapminder[gapminder$country == \"South Africa\",1:6], \n       aes(x = year, y = lifeExp)) + \n  geom_point() + \n  geom_line(___) \n```\n\n```{r Base5-solution}\nggplot(data = gapminder[gapminder$country == \"South Africa\",1:6], \n       aes(x = year, y = lifeExp)) + \n  geom_point() + \n  geom_line(colour = \"blue\") \n```\n\nWhat happens if we use a __mapping aesthetic__ as oppose to a __setting aesthetic__ to set the colour of the line graph?\n\n```{r Base6, exercise=TRUE, exercise.blanks = \"___+\"}\nggplot(data = gapminder[gapminder$country == \"South Africa\",1:6], \n       aes(x = year, y = lifeExp)) + \n  geom_point() + \n  geom_line(aes(colour = \"blue\"))\n```\n\nWhen we set the colour using a __mapping aesthetic__, our line plot uses the colour red even though we specified blue. Using `aes(colour = “blue”)` maps the vector `c(“blue”)` to the colour element of the line plot. \n\n__Mapping aesthetics__ is used when we want to change how a __layer__ is displayed based on the underlying data. For instance, we can map the `year` __column__ of the data set to the colour __mapping aesthetic__ of the `geom_line` __layer__. In this case, `ggplot2` will assign colours based on the values in the `year` __column__. `ggplot2` will automatically assign a unique level of the __aesthetic__ to each value, a process known as __scaling__\n\n```{r Base7, exercise=TRUE, exercise.blanks = \"___+\"}\nggplot(data = gapminder[gapminder$country == \"South Africa\",1:6], \n       aes(x = year, y = lifeExp)) + \n  geom_point() + \n  geom_line(aes(colour = year))\n```\n\n### Scales\n\nIn the previous graph, the colours used for the __variable__ `year` were automatically selected. If we want to change how the __variable__ `year` map to a set of colours we need to add a __scale layer__ to a ggplot2 graphics __object__\n\nA __scale layer__ use the following syntax: `scale_[aesthetic]_[option]` where:\n\n  - `[aesthetic]` should be replaced the name of the __mapping aesthetic__ you would like to change e.g. colour, shape, linetype, alpha, size, fill, x, y ,\n  - `[option]` should be used to specify how you would like to change the __aesthetic__. For example, `manual`, `continuous` or `discrete` (depending on the nature of the variable)\n\nExamples \n\n  - `scale_linetype_manual()`: Manually specify the linetype of each different value\n  - `scale_alpha_continuous()`: Varies transparency over a continuous range\n    \nTo change the default colours use to __map__ the __variable__ `year` to colour, the __scale layer__ `scale_color_continuous` can be added\n\n```{r Base8, exercise=TRUE, exercise.blanks = \"___+\"}\nggplot(data = gapminder[gapminder$country == \"South Africa\",1:6], \n       aes(x = year, y = lifeExp)) + \n  geom_point() + \n  geom_line(aes(colour = year)) +\n  scale_color_continuous(type = \"gradient\",\n                         low = \"red\", \n                         high = \"blue\")\n```\n\nWhen we try to add a __scale__ that is not compatible with the __map variable__, the code will return an error\n\n```{r Base9, exercise=TRUE, exercise.blanks = \"___+\"}\nggplot(data = gapminder[gapminder$country == \"South Africa\",1:6], \n       aes(x = year, y = lifeExp)) + \n  geom_point() + \n  geom_line(aes(colour = year)) +\n  scale_color_discrete()\n```\n\nIn the above example, `ggplot2` returns an error since we are trying to __map__ a __continuous variable__ to a __discrete__ __set__ of colour.\n\nWhen we map a discrete __variable__ to the __aesthetic__ colour e.g. `country`, we can __map__ the __variable__ to a discrete set of colours by adding the layer `scale_color_discrete`\n\n```{r Base10, exercise=TRUE, exercise.blanks = \"___+\"}\nggplot(data = gapminder[gapminder$country == \"South Africa\",1:6], \n       aes(x = year, y = lifeExp)) + \n  geom_point() + \n  geom_line(aes(colour = country)) +\n  scale_color_discrete(type = c(\"blue\"))\n```\n\nSince x is a __mapping aesthetic__, it also has a __scale__. For example, we can add the __scale layer__ ``scale_x_continuous` to set the major tick marks or breaks to align with the years that we collected data for\n\n```{r Base11, exercise=TRUE, exercise.blanks = \"___+\"}\nggplot(data = gapminder[gapminder$country == \"South Africa\",1:6], \n       aes(x = year, y = lifeExp)) + \n  geom_point() + \n  geom_line() +\n  scale_x_continuous(breaks = seq(1952, 2007, by = 5))\n```\n\n__Scales__ can also be used to limit the data displayed. In the example, any __rows__ with years before 1995 is removed\n\n```{r Base12, exercise=TRUE, exercise.blanks = \"___+\"}\nggplot(data = gapminder[gapminder$country == \"South Africa\",1:6], \n       aes(x = year, y = lifeExp)) + \n  geom_point() + \n  geom_line() +\n  scale_x_continuous(limit = c(1995, NA))\n```\n\n### Labels\n\nA x-label will be automatically created using the __name__ of the __variable mapped__ to the x __aesthetic__. To add a manual label, the __layer__ `xlab` can be added. The `xlab` __layer__ can also be used to remove the label e.g. `xlab(NULL)`\n\n```{r Base13, exercise=TRUE, exercise.blanks = \"___+\"}\nggplot(data = gapminder[gapminder$country == \"South Africa\",1:6], \n       aes(x = year, y = lifeExp)) + \n  geom_point() + \n  geom_line() +\n  xlab(\"Year\") \n```\n\nTo add a custom y-label and title to a plot add the __layers__ `ylab` and `ggtitle` respectively\n\n```{r Base14, exercise=TRUE, exercise.blanks = \"___+\"}\nggplot(data = gapminder[gapminder$country == \"South Africa\",1:6], \n       aes(x = year, y = lifeExp)) + \n  geom_point() + \n  geom_line() +\n  xlab(\"Year\") + \n  ylab(\"Life expectancy\") +\n  ggtitle(\"Life expectancy in SA\")\n```\n\nThe `ggtitle`, `xlab` and `ylab` are __helper layers__; shortcuts to quickly change a ggplot2 graphics __object__. In general, any labels including labels of legends can be set using the `labs` __layer __\n\n```{r Base15, exercise=TRUE, exercise.blanks = \"___+\"}\nggplot(data = gapminder[gapminder$country == \"South Africa\",1:6], \n       aes(x = year, y = lifeExp)) + \n  geom_point() + \n  geom_line() +\n  labs(title = \"Life expectancy in SA\", \n       x = \"Year\", \n       y = \"Life expectancy\")\n```\n\n### Themes\n\nThe `theme` __layer__ allows you to exercise fine control over non-data elements of a plot. The `ggplot2` __package__ includes several build-in themes e.g. `theme_grey()`, `theme_bw()`, `theme_linedraw()`, `theme_light()`, `theme_dark()`, `theme_minimal()` or `theme_classic()`\n\n![[Theme.png]]\n\nAdding a built-in theme is straightforward, simply add the theme as a __layer__. If you want all your plots to use the same theme use the __function__ `theme_set()` at the start of an R Script e.g. `theme_set(theme_classic())`\n\n```{r Base16, exercise=TRUE, exercise.blanks = \"___+\"}\nggplot(data = gapminder[gapminder$country == \"South Africa\",1:6], \n       aes(x = year, y = lifeExp)) + \n  geom_point() + \n  geom_line() +\n  labs(title = \"Life expectancy in SA\", \n       x = \"Year\", \n       y = \"Life expectancy\") +\n  theme_bw()\n```\n\nWe can also create our own theme using the `theme` __layer__:\n\n  - The theme __layer__ has several __arguments__ (also called elements) that specify the non-data elements that can be controlled. For example, the `plot.title` element controls the appearance of the plot titles\n  - Each element is associated with an element function, which describes the visual properties of the element. For example, `element_text()` sets the font size\n  - There are over 30 different elements, which can be viewed by opening the help file of the __function__ `theme` e.g. `?theme`\n  - If you are interested in how the different elements work refer to the book: 'ggplot2: Elegant Graphics for Data Analysis by Wickham H'\n\nYou can also add a built-in theme __layer__ followed by the theme __layer__ to override some of the built-in theme settings. I usually add the theme __layer__ last to ensure none of the other layer overrides any of the theme settings\n\n```{r Base17, exercise=TRUE, exercise.blanks = \"___+\"}\nggplot(data = gapminder[gapminder$country == \"South Africa\",1:6], \n       aes(x = year, y = lifeExp)) + \n  geom_point() + \n  geom_line() +\n  labs(title = \"Life expectancy in SA\", \n       x = \"Year\", \n       y = \"Life expectancy\") +\n  theme(plot.title = element_text(size = 8))\n```\n\n### Saving plots as objects\n\nSince a `ggplot2` plot is an __object__ we can assign a __name__ to the `ggplot` __object__\n\n```{r Base18, exercise=TRUE, exercise.blanks = \"___+\"}\nmy_plot \u003c- ggplot(data = gapminder[gapminder$country == \"South Africa\",1:6],\n                  aes(x = year, y = lifeExp)) + \n  geom_point() \n```\n\nWhen you assign a __name__ to a `ggplot` __object__, the plot will not automatically show in the `Plots` tab of `R Studio` or as an output. To show the graph simply add a single line of code with the __name__ of the __object__, e.g. the same as printing an object. Assigning a __name__ to a `ggplot` __object__ means that we can easily use it later. If I want some of my plots to look the same I usually store a custom theme in an object and add it as a layer to a `ggplot2` graphics __object__. \n\nOnce a __name__ is assigned to a `ggplot` __object__, we can easily use the __object__. For example, a __name__ can be assigned to a `ggplot` __object__ that stores a custom theme. The __name__ of the `object` can then simply be added to any `ggplot2` __object__\n\n```{r Base19, exercise=TRUE, exercise.blanks = \"___+\"}\nmy_theme \u003c- theme(axis.text = element_text(size = 10)) # Custom theme \n\nggplot(data = gapminder[gapminder$country == \"South Africa\",1:6],\n                  aes(x = year, y = lifeExp)) + \n  geom_point() +\n  my_theme\n```\n\n## Advance plots\n\n### Grammer of graphics\n\nThe layer grammar of graphics consists of eight components namely: Data, Mapping, Statistics, Scales, Geometries, Facets, Coordinates and Themes. We have discussed some of these components before. In this lesson we will introduce some new __layers__ and discuss some fundamental assumptions made by `ggplot2`\n\n![[grammer.png|350]]\n\n### Grouping data points\n\nPoints are connected in a specific order. When creating a line plot, `ggplot2` has to decide how each data point or __instance__ should be connected. By default, data points or __instances__ will all be connected based on a heuristic.\n\n```{r Adv1, exercise=TRUE}\nggplot(data.frame(x = c(1,1,2,2,3,3), y = c(1,2,2,1,1,2)), \n       aes(x = x, y = y)) + \n  geom_line()\n```\n\nWhen we try to create a line plot of the life expectancy over time for all countries in the `gapminder` data set, `ggplot2` connects all the __instances__. From the output, the life expectancy per country is not clear. We require a way to tell `ggplot2` that only specific data points should be connected  \n\n```{r Adv2, exercise=TRUE}\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp)) + \n  geom_line()\n```\n\nOne way to create a separate line for each country is to map the __variable__ `country` to a __mapping aesthetic__. For example, the __variable__ `country` can be __mapped__ to the colour `aesthetic`. Here, we need to include 142 countries in the legend which in turn uses up all the plotting space\n\n```{r Adv3, exercise=TRUE}\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           colour = country)) + \ngeom_line()\n```\n\nThe theme __layer__ can be used to remove the legend of the plot. Once the legend is removed, we end up with a line for each country in the gapminder data set\n\n```{r Adv4, exercise=TRUE}\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           colour = country)) + \ngeom_line() +\n  theme(legend.position = \"none\")\n```\n\nMany __geoms layers__, like `geom_line()`, use a single geometric object to display multiple rows of data. For these `geoms`, you can set the __group aesthetic__ to draw multiple objects without adding a legend or distinguishing feature to the plot\n\n```{r Adv5, exercise=TRUE}\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country)) + \n  geom_line() \n\n```\n\n### Facets\n\nTo highlight the regional difference between life expectancy trends, the __variable__ continent can be __mapped__ to the colour __aesthetic__ \n\n```{r Adv6, exercise=TRUE}\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country,  \n           colour = continent)) +\n  geom_line() \n```\n\nA __facet__ can be used to split a plot into subplots where each subplot displays a subset of the data. To __facet__ a plot add the __layer__ `facet_wrap()`\n\n```{r Adv7, exercise=TRUE}\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           colour = continent)) + \n  geom_line() + \n  facet_wrap(c(\"continent\"))\n```\n\nOur previous plot had various text that overlapped. To remove any text that overlap, the legend can be removed and the text size reduced \n\n```{r Adv8, exercise=TRUE}\nggplot(data = gapminder, aes(x = year, y = lifeExp,  group = country, \n                             colour = continent)) + \n  geom_line() + \n  facet_wrap(c(\"continent\")) + \n  theme(legend.position = \"none\", \n        text = element_text(size = 8))\n\n```\n\n### Modifying position\n\nSuppose we are interested in understanding the distribution of life expectancy over years. We could create a scatterplot, but due to multiple points overlapping, the scatterplot is difficult to interpret. All __layers__ include a position adjustment __argument__ that can be used to resolve overlapping data. The default position can be changed using the position __argument__\n\n```{r Ad1, exercise=TRUE}\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp)) +\n  geom_point()\n```\n\nTo avoid overlapping data points a small amount of noise can be added to the y-coordinate of each data point. To add a small amount of y noise to each data point, the __argument__ `position` can be set to `jitter`\n\n```{r Ad2, exercise=TRUE}\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp)) + \n  geom_point(position = \"jitter\", \n             aes(colour = as.character(year))) + \n  scale_x_continuous(breaks = \n                       seq(1952, 2007, by = 5)) + \n  labs(colour = \"year\")\n\n```\n\n## Statistical transformations\n\nImagine we wanted to develop a __function__ that produces a bar chart from data. When we design the __function__ we will have to decide:\n\n1. if the user simply passes the raw data and we calculate the count per category or\n2. If the user passes the count per category\n\n![[Decision.png]]\n\nWhen a `geom_bar()` __layer__ is added to a ggplot graphic __object__, ggplot2 computes the count per category from the raw data\n\n```{r Adv9, exercise=TRUE}\nstudent_data \u003c- data.frame(student_number = 1:6, \n                           degree = c(rep(\"Engineering\", 2), \n                                      rep(\"Computer Science\", 3),\n                                      \"Accounting\")) \n\nggplot(data = student_data, \n       aes(x = degree)) + \n  geom_bar()\n```\n\nThe algorithm that `ggplot` uses to calculate statics from raw data is called a `stat`, short for statistical transformation. The figure below illustrates how the process works for the `geom_bar` __layer__:\n\n![[geom_bar.png]]\n\n  - To determine which __stat__ is applied by a geom __layer__ the help file of the __geom__ can be viewed i.e. `?geom_bar`\n  - The default __stat__ used for the `geom_bar` __layer__ is `count`, which means that `geom_bar()` uses `stat_count()`\n  - You can generally use __geom__ and __stats__ interchangeably i.e. a bar plot can be created with `geom_bar()` or `stat_count()`\n  \nThe default __argument__ passed to the stat __argument__ of a __geom layer__ can be changed. For example, the __stat__ can be changed from `count` to `identity`. When using the stat `identity` the height of the bars is plotted to the raw values of the __variable mapped__ to the y __aesthetic__\n  \n```{r Adv10, exercise=TRUE}\ndata_count \u003c- data.frame(degree = c(\"Engineering\", \"Accounting\", \"Computer Science\"), \n                         count = c(2, 3, 1)) \n\nggplot(data = data_count , \n       aes(x = degree, y = count)) + \n  geom_bar(stat = \"identity\")\n```\n\n\n\n","lastmodified":"2023-08-16T12:08:43.38338855Z","tags":[]},"/R-Week-3":{"title":"R Week 3","content":"\n## The pipe operator\n\nYou will frequently need to perform a series of steps to answer a data related question.\n\nSuch a series of steps can often be represented as a **nested function** i.e.\n\n![[Pipe.png|300]]\n\n-   we start by first calculating `h(data)`,\n-   then proceed to calculate `g(h(data)),`\n-   and finally calculate `f(g(h(data)))`.\n\nWhen a nested function consists of multiple functions and arguments it can become difficult to both write and read the function.\n\nAlternatively, a series of steps can be viewed as a flow chart of **functions**\n\n![[Flow.png|470]]\n\n-   the **function** `f( )` process some data and sends the output to the **function** `g( )`,\n-   the **function** `g( )` then process the output received from the **function** `f( )` and send the output to the function `h( )` and\n-   the **function** `h( )` then process the output received from the **function** `g( )` and produce the final answer\n\nIn this section we will discuss how we can write code in a flow chart style using the **pipe operator** `%\u003e%`.\n\nTo illustrate how flow chart style code can be written, we will use the data set `mtcars`. To load the `mtcars` data set the **function** `data()` can be used\n\n```{r Load_mtcars, exercise=TRUE}\ndata(mtcars) # loads the data frame into the global environment\n```\n\nThe `mtcars` data set was extracted from the 1975 Motor Trend magazine, and comprises of the fuel consumption `mpg` and ten other accepts (features) of 32 automobiles (instances). We can view the first three **rows** of the data by using the **function** `head()`\n\n```{r mtcars_head, exercise=TRUE}\nhead(mtcars, n = 3) # displays the first three rows\n```\n\nUsing the data set `mtcars` we can calculate various statistics. For example, suppose that we want to determine the mean miles per gallon `mpg` of cars per their number of cylinders `cyl` for cars with more than one carburettors `carb`.\n\n![[Example1.png]]\n\nOur first option to calculate the statistic illustrated above is to break the calculation up into a series of steps, where we save the result of each step using an **object**.\n\n```{r mtcars_example1, exercise=TRUE}\n# 1. Remove cars with less than 2 carburettors \na \u003c- filter(mtcars, carb \u003e 1) \n# 2. Group data\nb \u003c- group_by(a, cyl) \n# 3. calculate the mpg mean per group \nc \u003c- summarise(b, mean(mpg)) \n# 4. sort the results by cyl\narrange(c, cyl) \n```\n\nBreaking the calculation down into a series of steps makes it easy to read the code, however as a result unnecessary copies of the same **object** is created.\n\nA second option to calculate the statistic of interest, is to use **nested functions**\n\n```{r mtcars_example2, exercise=TRUE}\narrange(summarise(group_by(filter(mtcars, carb \u003e 1), cyl), mean(mpg)), cyl)\n```\n\nUsing **nested functions** avoid the use of explicitly creating **objects**, but can the readability of the code be improved?\n\nWe can express the functions as a flow chart using the **pipe operator** `\u003e%\u003e`.\n\n```{r mtcars_example3, exercise=TRUE}\nmtcars %\u003e% filter(carb \u003e 1) %\u003e% group_by(cyl) %\u003e% summarise(mean(mpg)) %\u003e% arrange(cyl)\n```\n\nThe **pipe operator** `\u003e%\u003e` avoids creating unnecessary **objects** and makes it easier to read code. The **pipe operator** `\u003e%\u003e` can be interpreted as a flow chart where we send `input` to a **function** that produces an **output**, the **output** is then be sent to the next **function**\n\n![[mtflow.png]]\n\nTo insert the **pipe operator** `\u003e%\u003e` the shortcut `Ctrl + Shift + M` can be used. **Pipes** are clearer to read when each **function** is on a separate line\n\n```{r mtcars_example4, exercise=TRUE}\nmtcars %\u003e% \n  filter(carb \u003e 1) %\u003e% \n  group_by(cyl) %\u003e% \n  summarise(mean(mpg)) %\u003e% \n  arrange(cyl)\n```\n\nThe thing to the left of a **pipe operator** `%\u003e%` is **passed** to the **first argument** of the **function** on the \\_\\_right \\_\\_of the **pipe operator** `%\u003e%`, while additional **function arguments** can be specified as usual\n\nIf you ever need to pass an **object** to an **argument** other then the **first argument**, set the **argument** equal to `.`. For example, `y %\u003e% f(x,.)` is equivalent to `f(x,y)` and `z %\u003e% g(x, y, arg = .)` is equivalent to `g(x,y,arg = z)`\n\nSo far we have only illustrated how to print the results from **pipe operations**. We can also **assign** the **output** of a chain of **pipe operations** using the **assignment operator** `\u003c-`\n\n```{r mtcars_example5, exercise=TRUE}\nresult \u003c- \n  mtcars %\u003e% \n  filter(carb \u003e 1) %\u003e% \n  group_by(cyl) %\u003e% \n  summarise(mean(mpg)) %\u003e% \n  arrange(cyl)\n\nresult\n```\n\n**Assignment** can also be performed at the end of a chain using the **assignment operator** `-\u003e`\n\n```{r mtcars_example6, exercise=TRUE}\nmtcars %\u003e% \n  filter(carb \u003e 1) %\u003e% \n  group_by(cyl) %\u003e% \n  summarise(mean(mpg)) %\u003e% \n  arrange(cyl) -\u003e result\n\nresult\n```\n\nLastly, note that the the **pipe operator** can only be used if the **package** `tidyverse` is loaded.\n\n## dplyr\n\nGiven that our data is in a **data frame** we might want to **manipulate** the **data frame** in various ways, for example:\n\n-   **add** or **remove row(s)** or **column(s)**,\n-   **rearrange** the **row(s)** or **column(s)** or\n-   **change** the **names** of **column(s)**.\n\nAll the above examples can be implemented using base R, but the base **functions** is not self-describing. Using base R code to modify **data frames** often lead to **nested functions** that are difficult to read.\n\nThe **package** `dplyr` was created for the sole purpose of simplifying the process of **manipulating**, **sorting**, **summarising** and **joining data frames**. The **functions** included in the `dplyr` **package** often leads to (i) more efficient code, (ii) code that is easier to read and (iii) code that is easier to write\n\nThe `dplyr` **package** forms part of the `tidyverse` **packages**. This means that if you have **installed** the `tidyverse` **package** previously you do not have to reinstall the `dplyr` **package**. Once **installed** the `dplyr` package can be **loaded** using the **function** `library()`\n\n```{r dplyr1, exercise=TRUE}\nlibrary(dplyr)\n```\n\nThe `dplyr` **package** includes various function to help you manipulate data frames. Some examples include:\n\n| **Function**   | **Purpose**                                                                |\n|-----------------------------|-------------------------------------------|\n| **filter()**   | select **row(s)** to keep using conditions                                 |\n| **distinct()** | select unique **rows(s)**                                                  |\n| **slice**\\_    | select, remove or duplicate **row(s)**                                     |\n| **arrange()**  | order the **rows** of a data frame by the values of selected **column(s)** |\n| **select()**   | select **column(s)** from a data frame to keep                             |\n| **pull()**     | select a single **column** of a data frame as a **vector**                 |\n| **rename()**   | assign new names to one or more **columns**                                |\n| **relocate()** | change the order of **columns**                                            |\n| **mutate()**   | creates new **columns(s)**                                                 |\n\n## Tibbles\n\nIn this lesson we will work with **tibbles** instead of traditional R **data frames**. **Tibbles** are **data frames**, but are tweaked to make our life a bit easier:\n\n-   **Tibbles** are lazy i.e. the names and data types of columns are not automatically changed\n-   **Tibbles** are strict i.e. partial matching is not performed\n-   **Tibbles** are self-descriptive\n-   **Tibbles** print better than data frames\n-   **Tibbles** do not use row names\n-   The **column names** of \\_\\_tibbles \\_\\_can be more descriptive e.g. white spaces can be used in **column names**\n\nThe **function** `class(`) can be used to verify that an **object** is a **tibble**\n\n```{r dplyr2, exercise=TRUE}\nlibrary(gapminder)\nclass(gapminder)\n```\n\nWhen **subsetting** is performed on a **data frame** the **result returned** is not always a **data frame**. When we are unsure of the **data type** of an **object**, it becomes very difficult to write code in a flow chart style. How do we now that the next operation in our flow diagram will accept the **data type** pass to it?\n\n-   we will either have to keep track of the different **data types**,\n-   write explicit **tests** or **conversions** to ensure the code execute without an error or\n-   we can use **tibbles** .\n\nThe main advantage of **tibbles**, in my opinion, is that when we apply a dplyr **function** to a **tibble** the results are always returned as a **tibble**:\n\n![[Tibble.png|470]]\n\n## Row operations\n\n### Filter\n\n**Objective**: Select rows to keep using `filter()`\n\n**Description**: Filtering is a common task used to identify or select row(s) of a data set where a particular variable matches a specific value/condition\n\n**Function**\n\n`filter(.data, ...)` or `data %\u003e% filter(...)`\n\n| **Argument** | **Description**                                                                                                                                                              |\n|-----------------------------|-------------------------------------------|\n| .data        | data frame or tibble                                                                                                                                                         |\n| ...          | One or more expressions that returns logical vectors. When multiple expressions separated by commas are provided, the expressions are combined with the **and** `\u0026` operator |\n\n------------------------------------------------------------------------\n\n*Example 1*\n\nSelect rows from the gapminder data set where the `country` is **equal** to `South Africa`\n\n```{r filter1, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% filter(___)\n```\n\n```{r filter1-solution}\ngapminder %\u003e% filter(country == \"South Africa\")\n```\n\n*Example 2*\n\nSelect rows from the gapminder data set where the country is equal to South Africa or Lesotho\n\n```{r filter2, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% filter(country %in% ___)\n```\n\n```{r filter2-solution}\ngapminder %\u003e% filter(country %in% c(\"South Africa\",\"Lesotho\"))\n```\n\n*Example 3*\n\nSelect rows where the country is equal to South Africa and the year is greater than 2000\n\n```{r filter3, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% filter(country == \"South Africa\", ___)\n```\n\n```{r filter3-solution}\ngapminder %\u003e% filter(country == \"South Africa\", year \u003e 2000)\n```\n\nor alternatively\n\n```{r filter4, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% filter(country == \"South Africa\" ___ year \u003e 2000)\n```\n\n```{r filter4-solution}\ngapminder %\u003e% filter(country == \"South Africa\" \u0026 year \u003e 2000)\n```\n\nMultiple logic rules can be applied in the `filter()` function\n\nRows can be filtered using the range of comparison operators, logical operators and functions to evaluate missing i.e. `NA` values\n\n| Operator | Description              |\n|----------|--------------------------|\n| \\\u003c       | Less than                |\n| \\\u003e       | Greater than             |\n| ==       | Equal to                 |\n| \\\u003c=      | Less than or equal to    |\n| \\\u003e=      | Greater than or equal to |\n| !=       | Not equal to             |\n| %in%     | Group membership         |\n| is.na    | is NA                    |\n| !is.na   | is not NA                |\n| \u0026        | And                      |\n| $|$      | Or                       |\n| !        | Not                      |\n\n### Distinct\n\n**Objective**: Select unique row(s)\n\n**Description**: Select unique row(s) based on a list of specified columns\n\n**Function**\n\n`distinct(.data, ...)` or `data %\u003e% distinct(...)`\n\n| **Argument** | **Description**                                                                                                                                                                                                                                      |\n|-----------------------------|-------------------------------------------|\n| .data        | data frame or tibble                                                                                                                                                                                                                                 |\n| ...          | Column names to use to determine uniqueness of a row. When multiple rows for a given combination of columns exists, only the first rows are preserved. When column names are not specified all columns are used to determine the uniqueness of a row |\n| .keep_all    | The default behaviour of the function is to drop all unspecified columns. If you want to get distinct rows by certain columns without dropping the other columns set the optional argument `.keep_all` to `TRUE`                                     |\n\n------------------------------------------------------------------------\n\n*Example 1*\n\nFind all the unique years in the data set gapminder\n\n```{r dist1, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% distinct(___)\n```\n\n```{r dist1-solution}\ngapminder %\u003e% distinct(year)\n```\n\nNote that a **tibble** is returned although the result can be easily represented by an **atomic vector**\n\n*Example 2*\n\nFind all the unique years , but show all column\n\n```{r dist2, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% distinct(___)\n```\n\n```{r dist2-solution}\ngapminder %\u003e% distinct(year, .keep_all = TRUE)\n```\n\nOnly 12 rows are returned since the function `distinct()` only preserves the first distinct row.\n\n### Slice\n\n**Objective**: Select, remove or duplicate rows\n\n**Description**: The `slice_` **functions** include various functions to select, remove or duplicate rows. To illustrate how the `slice_` **functions** work we will look at the function **slice_sample()** which can be used to randomly select rows\n\n**Function**\n\n`slice_sample(.data, ...)` or `data %\u003e% slice_sample(...)`\n\n| **Argument** | **Description**                                                                                                               |\n|-----------------------------|-------------------------------------------|\n| .data        | data frame or tibble                                                                                                          |\n| n, prop      | Provide either (i) `n` the number of rows to sample at random or (ii) `prop` to sample a proportion of rows from the data set |\n\n------------------------------------------------------------------------\n\n*Example 1*\n\nSample four random rows from the data set\n\n```{r slice1, exercise=TRUE, exercise.blanks = \"___+\"}\nset.seed(123) # makes random numbers repeatable \ngapminder %\u003e% ___ # select four random rows\n\n```\n\n```{r slice1-solution}\nset.seed(123) # makes random numbers repeatable \ngapminder %\u003e% slice_sample(n = 4) # selects four random rows\n```\n\n### Arrange\n\n**Objective**: Order the rows of a data frame by the values of selected column(s)\n\n**Description**: Often used to view the rows of an observation in a specific order based on a the values in a particular column\n\n**Function**\n\n`arrange(.data, ...)` or `data %\u003e% arrange(...)`\n\n| **Argument** | **Description**                                                                                           |\n|-----------------------------|-------------------------------------------|\n| .data        | data frame or tibble                                                                                      |\n| ...          | Names of columns to sort rows on separated by commas where the column names listed first takes precedence |\n\nValues are sorted in ascending order by default. To sort in descending order using column `x` pass `desc(x)` to the `…` argument of the **function** `arrange()`\n\n------------------------------------------------------------------------\n\n*Example 1*\n\nSort the data frame gapminder by `continent` in **ascending** order and `country` in **descending** order\n\n```{r arrange1, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% arrange(___)\n\n```\n\n```{r arrange1-solution}\ngapminder %\u003e% arrange(continent, desc(country))\n```\n\n## Column operations\n\n### Select\n\n**Objective**: Select column(s) from a data frame to keep\n\n**Description**: Columns to keep can be selected based on the (i) column names, (ii) using a column range or (ii) by using helper functions\n\n**Function**\n\n`select(.data, ...)` or `select %\u003e% arrange(...)`\n\n| **Argument** | **Description**                                                                                                                                                                                         |\n|-----------------------------|-------------------------------------------|\n| .data        | data frame or tibble                                                                                                                                                                                    |\n| ...          | One or more unquoted column names, a range of column names to keep specified as x:y where x:y selects column x, column y and all the columns between the columns x and y, and/or using helper functions |\n\n------------------------------------------------------------------------\n\n*Example 1*\n\nSelect the columns country, year and population\n\n```{r select1, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% \n  select(___)\n```\n\n```{r select1-solution}\ngapminder %\u003e% \n  select(country, year, pop)\n```\n\nalternatively we can specify the columns to remove using `-` signs\n\n```{r select2, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% \n  select(___)\n```\n\n```{r select2-solution}\ngapminder %\u003e% \n  select(-continent, -lifeExp, -gdpPercap)\n```\n\n*Example 2*\n\nWe can also use the `:` symbol to select a range of columns\n\n```{r select3, exercise=TRUE}\ngapminder %\u003e% \n  select(country:year, pop)\n```\n\nwhere the value `country:year` will select the `country` column, the `year` column and all columns between the `country` and `year` columns\n\n*Example 3*\n\nVarious **helper functions** such as `starts_with()`, `ends_with()` and `contains()` can also be used to select columns based on conditions\n\nTry selecting all columns that starts with the character `c` or contains the phrase `gdp`\n\n```{r select4, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% \n  select(___)\n```\n\n```{r select4-solution}\ngapminder %\u003e% \n  select(starts_with(\"c\"), contains(\"gdp\"))\n```\n\nThe help file of the **function** `select()` can be viewed to see thevarious helper functions available i.e. `?select()`\n\n*Example 4*\n\nTo select `columns` based on column types, the helper function `where()` can be used. Try selecting all the numeric columns\n\n```{r select5, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% \n  select(where(___))\n```\n\n```{r select5-solution}\ngapminder %\u003e% \n  select(where(is.numeric))\n```\n\nThe **function** passed to the `argument` of `where()` should return a single `TRUE` or `FALSE`. If you are creative you can for instance remove all columns with more than 50% missing values\n\n```{r select6, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% \n  select(where(function(x) sum(is.na(x)) / length(x) \u003c 0.5)) \n```\n\n### Pull\n\n**Objective**: Select a single column of a data frame as a vector\n\n**Description**: Often in specific steps of an analysis a vector is required rather than a data frame. The **function** `pull(`) allows you to select a single column or value from a data frame as a vector\n\n**Function**\n\n`pull(.data, ...)` or `select %\u003e% pull(...)`\n\n| **Argument** | **Description**                                                                                                                                                                   |\n|-----------------------------|-------------------------------------------|\n| .data        | data frame or tibble                                                                                                                                                              |\n| ...          | A column specified as (i) the column name or (ii) a positive integer, giving the position counting from left or (iii) a negative integer, giving the positing counting from right |\n\n------------------------------------------------------------------------\n\n*Example 1*\n\n```{r pull1, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% \n  pull(year)\n```\n\nYou can verify that the above returns a vector by running\n\n```{r pull2, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% \n  pull(year) %\u003e% \n  class()\n```\n\n### Rename\n\n**Objective**: Assign new names to one or more columns\n\n**Description**: Replace names of columns with descriptive names. Descriptive names improve readability and reduces the amount of formatting required e.g. when creating a plot\n\n**Function**\n\n`rename(.data, ...)` or `rename` %\\\u003e% pull(...)\\`\n\n| **Argument** | **Description**                                                                                                                                                          |\n|-----------------------------|-------------------------------------------|\n| .data        | data frame or tibble                                                                                                                                                     |\n| ...          | Use `new_name = old_name` to rename a column. To rename multiple columns separate the assignments using commas i.e. `new_name_1 = old_name_1`, `new_name_2 = old_name_2` |\n\n------------------------------------------------------------------------\n\n*Example 1*\n\nRename the columns `lifeExp` to `Life Expectancy` and `pop` to `Population`\n\n```{r rename1, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% \n  rename(___ = ___, ___ = ___) \n```\n\n```{r rename1-solution}\ngapminder %\u003e% \n  rename(\"Life Expectancy\" = lifeExp, \n         Population = pop) \n```\n\nIn a **tibble**, unlike in a **data frame**, we can use spaces in column names given that the name is surrounded by double quotations `“` or backticks \\`\n\n### Relocate\n\n**Objective**: Change the order of columns\n\n**Description**: Change the position of the columns of a data frame\n\n**Function**\n\n`relocate(.data, ...)` or `relocate` %\\\u003e% pull(...)\\`\n\n| **Argument** | **Description**                                                                                                |\n|-----------------------------|-------------------------------------------|\n| .data        | data frame or tibble                                                                                           |\n| ...          | columns names separated by commas that will be moved to the front of the object passed to the `.data` argument |\n\nThe default arguments `.before` or `.after` of the **function** `relocate()` can be used to move a column(s) before or after a specific column. Only one of the default arguments can be used at a time\n\n------------------------------------------------------------------------\n\n*Example 1*\n\nMove the column `pop` before the column `lifeExp`\n\n```{r relocate1, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% \n  relocate(___, ___) \n```\n\n```{r relocate1-solution}\ngapminder %\u003e% \n  relocate(pop, .before = lifeExp)\n```\n\n### Mutate\n\n**Objective**: Create new column(s)\n\n**Description**: Used to add new a column to a data set while preserving the old columns of the data set. The new variable can be derived from the values of another column(s) in the data set\n\n**Function**\n\n`mutate(.data, ...)` or `mutate` %\\\u003e% pull(...)\\`\n\n| **Argument** | **Description**                                                                                                                                                                                                                                                                                 |\n|-----------------------------|-------------------------------------------|\n| .data        | data frame or tibble                                                                                                                                                                                                                                                                            |\n| ...          | New column(s) specified as `name = value` and separated with a comma where the `value` can be: (i) a vector of length 1 which will be recycled, (ii) a vector of the same length as the number of rows, (iii) NULL to remove a column or (iv) a data frame or tibble to create multiple columns |\n\n------------------------------------------------------------------------\n\n*Example 1*\n\nCreate a new column `pop_in_million` which divided the values in the `pop` column by 1 000 000\n\n```{r mutate1, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% \n  mutate(pop_in_million = ___)\n\n```\n\n```{r mutate1-solution}\ngapminder %\u003e% \n  mutate(pop_in_million = pop/1000000)\n```\n\nAdditional **columns** can be added in a single `mutate()` call, by separating expressions with commas\n\n*Example 2*\n\nThe `ifelse()` function can be used to assign values to a column based on a condition. Use the function **mutate** to change the country `Swaziland` to `Estwatini`\n\n```{r mutate2, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% \n  mutate(country == ifelse(___))\n\n```\n\n```{r mutate2-solution}\ngapminder %\u003e% \n  mutate(country = ifelse(country == \"Swaziland\",\n                                      \"Eswatini\",\n                                      as.character(country))) \n```\n\nThe **function** `mutate()` will replace the values in an existing column, when an existing column name is provided\n\n*Example 3*\n\nThe **function** `case_when()` can be used to perform multiple `ifelse()` operations]\n\n```{r mutate3, exercise=TRUE}\ngapminder %\u003e% \n  mutate(gdp = case_when(gdpPercap \u003c 700 ~ \"Low\", \n                         gdpPercap \u003c 800 ~ \"Moderate\", \n                         TRUE ~ \"High\"))\n```\n\n## Summarise data\n\n### Summarise\n\n**Objective**: Calculate the summary statistic of specific columns\n\n**Description**: The `summarise()` **function** takes column(s) and computes something (any calculation that can aggregate multiple values into a single value) using the values of every row\n\n**Function**\n\n`summarise(.data, ...)` or `summarise` %\\\u003e% pull(...)\\`\n\n| **Argument** | **Description**                                                                                                                                                                                                                                                                                    |\n|-----------------------------|-------------------------------------------|\n| .data        | data frame or tibble                                                                                                                                                                                                                                                                               |\n| ...          | Summary statistic to calculate specified as `name = function()` where the `name` is optional and the `function()` can be any summary function like `min()`, `mean()` and `max()`. Multiple statistics can be calculated by separating summary statistics using commas or by using helper functions |\n\n------------------------------------------------------------------------\n\n*Example 1*\n\nFor South Africa, calculate the number of observations, max population, mean life expectancy and the range of life expectancy over the years\n\n```{r sum1, exercise=TRUE, exercise.blanks = \"___+\", exercise.lines = 8}\ngapminder %\u003e% \nfilter(country == \"South Africa\") %\u003e% \n  summarise(count = n(),  # dplyr count function \n            max_pop = ___, \n            ___,\n            range_life_exp = ___ - ___)\n\n```\n\n```{r sum1-solution}\ngapminder %\u003e% \n  filter(country == \"South Africa\") %\u003e% \n  summarise(count = n(),  # dplyr count function \n            max_pop = max(pop), \n            mean(lifeExp),  # no name specified\n            range_life_exp = max(lifeExp) - min(lifeExp))\n```\n\nThe new columns are calculated using all the rows of the gapminder data set filtered for the country South Africa\n\n### Across\n\n**Objective**: Avoid repetitive code due to applying the same function to multiple columns\n\n**Description**: The `across()` function is a **helper function** that can be used to apply one or more functions to one or more columns\n\n**Function**\n\n`across(.cols, .fns)`\n\n| **Argument** | **Description**                                                                                                           |\n|-----------------------------|-------------------------------------------|\n| .cols        | A column name or a vector of column names e.g. c(col1, col2)                                                              |\n| .fns         | A **reference** to a function e.g. mean or a list of references to functions e.g. list(mean = mean, max = max, min = min) |\n\nNote that a **reference** to a **function** must be provided i.e. a **function** without **parenthesis**\n\n------------------------------------------------------------------------\n\n*Example 1*\n\nCalculate the mean, maximum and minimum value of the column `lifeExp` and the column `pop`\n\n```{r sum2, exercise=TRUE, exercise.blanks = \"___+\", exercise.lines = 8}\ngapminder %\u003e% \n  filter(country == \"South Africa\") %\u003e% \n  summarise(across(___, \n                   list(___)))\n```\n\n```{r sum2-solution}\ngapminder %\u003e% \n  filter(country == \"South Africa\") %\u003e% \n  summarise(across(c(lifeExp, pop), \n                   list(mean = mean, \n                        max = max, \n                        min = min))) \n```\n\nNames are automatically created based on the column and list names\n\n------------------------------------------------------------------------\n\nThe **function** `across(`)\\` can be used in additional ways to avoid repetition\n\n-   `across(everything())` will summarise / mutate all columns. For example, to calculate the mean and standard deviation of all the columns for the data set data:\n\n```{r sum3, exercise=TRUE}\ngapminder %\u003e% \nsummarise(across(everything(), list(mean = mean, sd = sd)))\n```\n\n-   `across(where())` will summarise / mutate all columns that satisfy some logical condition. For example, to calculate the mean and standard deviation for all numeric columns of the data set data\n\n```{r sum4, exercise=TRUE}\ngapminder %\u003e% \nsummarise(across(where(is.numeric), list(mean = mean, sd = sd))) \n```\n\nOther helper functions previously discussed can also be used inside the **function** across() e.g. `starts_with()`, `ends_with()` and `contains()`\n\n## Group statistics\n\n-   To gain better insights, we can calculate statistics by a group\n-   For example, suppose we have a data set composed of a key and data column. Then we can compute the mean of the values in the data column for each group or unique value present in the key column\n-   The operations of calculating group statistics can be thought of as a split, apply and combine operation\n\n![[split.png]]\n\nIn the `dplyr` **package**, we will use the `group_by()` **function** to implement the split operation, while the `summarise()` **function** can be used to perform the apply and combine operations\n\n### Group by\n\n**Objective**: Group rows\n\n**Description**: Takes an existing data object and transform it into a grouped data object. Once a data set is grouped, operations can be performed \"by group\"\n\n**Function**\n\n`group_by(.data, ...)` or `data %\u003e% group_by(...)`\n\n| **Argument** | **Description**                                                                       |\n|-----------------------------|-------------------------------------------|\n| .data        | data frame or tibble                                                                  |\n| ...          | A column name to group the data frame by or multiple column names separated by commas |\n\n-   Also read up on the `ungroup()` **function**\n\n------------------------------------------------------------------------\n\n*Example 1*\n\nCalculate the mean `lifeExp` per `country`\n\n```{r group1, exercise=TRUE, exercise.blanks = \"___+\"}\ngapminder %\u003e% \n  ___ %\u003e% \n  summarise(lifeExp_mean = mean(lifeExp)) \n```\n\n```{r group1-solution}\ngapminder %\u003e% \ngroup_by(country) %\u003e% \nsummarise(lifeExp_mean = mean(lifeExp))  \n```\n\nIf we did not use the `group_by()` **function** in the example above, the operation would have computed the mean life expectancy using all the rows of the gapminder data set\n\n### Window\n\nWe have previously seen how we can compute some statistics of South Africa using the `summarise()` **function** i.e. calculating the minimum, mean and maximum life expectancy\n\n```{r window1, exercise=TRUE}\ngapminder %\u003e% \n  filter(country == \"South Africa\") %\u003e% \n  select(lifeExp) %\u003e% \n  summarise(min_lifeExp = min(lifeExp), \n            mean_lifeExp = mean(lifeExp), \n            max_lifeExp = max(lifeExp))\n```\n\nHowever, we do not have any way to directly calculate (i) how South Africa compares against other countries and (ii) whether the life expectancy of South Africa has improved or not\n\n**Window functions** allow us to compare rows to each other. We will start by looking at the two **offset** **functions** known as `lag()` and `lead()`. The **function** `lag()` retrieves the previous element of a **vector**, while the function `lead()` retrieves the next element of a **vector**\n\n```{r lag1, exercise=TRUE}\nx \u003c- 1:5 \nlag(x)\n```\n\nIn the example above, we use the **function** `lag()` to retrieve the previous element of the **vector** `x`. Since the first element of the **vector** `x` does not have a previous element the **function** `lag()` returns `NA`\n\nAccessing the previous and next \\_\\_element \\_\\_of a **vector** can help us to calculate **trends** or create new **variables**\n\n------------------------------------------------------------------------\n\n*Example 1*\n\nCalculate the change in life expectancy per `country` per year\n\n```{r lag2, exercise=TRUE}\ngapminder %\u003e% \n  filter(year \u003e 2000) %\u003e% \n  arrange(country, year) %\u003e% \n  mutate(change_lifeExp = lifeExp - lag(lifeExp)) %\u003e%\n  select(country, year, lifeExp, change_lifeExp)\n```\n\nAt first our code seems to work, but what happens when the `country` changes? To prevent the problem we can use `group_by()`\n\n*Example 2*\n\nCalculate the change in life expectancy per `country`\n\n```{r lag3, exercise=TRUE}\ngapminder %\u003e% \n  filter(year \u003e 2000) %\u003e% \n  arrange(country, year) %\u003e% \n  group_by(country) %\u003e% \n  mutate(change_lifeExp = lifeExp - lag(lifeExp)) %\u003e% \n  select(country, year, lifeExp, change_lifeExp)\n```\n\n### Ranking\n\n**Window functions** allow us to compare **rows** to each other. **Ranking functions** takes a **vector** to order, and returns various types of **ranks**. The **function** `row_number()` assigns **ranks** to values in a **vector** based on the minimum value, where ties are resolved by **assigning** the lowest **rank** to the value that appears first\n\n```{r rank1, exercise=TRUE}\nx \u003c- c(10, 2, 10, 6, 4) \nrow_number(x)\n```\n\nThe **function** `min_rank()` works exactly the same as the **function** `row_number()` except that ties are resolved by assigning the same rank to equal values\n\n```{r rank2, exercise=TRUE}\nx \u003c- c(10, 2, 10, 6, 4) \nmin_rank(x)\n```\n\n------------------------------------------------------------------------\n\n*Example 1*\n\nRank the `countries` by `lifeExp` in the `year` 2007\n\n```{r rank3, exercise=TRUE}\ngapminder %\u003e% \n  select(country, year, lifeExp) %\u003e% \n  filter(year == 2007) %\u003e% \n  mutate(rank = row_number(lifeExp)) %\u003e% \n  arrange(rank) \n```\n","lastmodified":"2023-08-16T12:08:43.38338855Z","tags":[]},"/R-Week-4":{"title":"R Week 4","content":"\n## Importing and Exporting Files\n\nWhen searching for external objects to import, such as files, R's default behaviour is to search in your __working directory__. The __working directory__ is the location on your file system where R looks for files and where it saves output by default.\n\nTo determine your __working directory__ the __function__ `getwd()` can be used:\n\n```{r getwd, exercise=TRUE}\ngetwd()\n```\n\nIf you need to import a file that is not located inside your current __working directory__, you have two options: either change your __working directory__ to the location of the file or specify the full file path, such as C:/documents/rwork/data.csv.  Note that file paths should be specified using forward slashes `/` as opposed to back slashes `\\`.\n\nTo change your `working directory` the __function__ `setwd()` can be used.\n\n```{r setwd, eval=FALSE, echo=TRUE}\n# Replace 'your/desired/directory' with the actual directory path\nsetwd(\"your/desired/directory\")\n```\n\nWhen working with R Markdown (Rmd) files, you have the added advantage that your working directory is often set correctly by default. This means that when you open an Rmd file (when RStudio is closed), R will automatically consider the directory containing the Rmd file as your working directory.\n\n## Reading Data\n\nR includes a variety of built-in __functions__ for importing data stored in text files, like\n`read.table()` and `read.csv()`. \nHowever, we will use functions from the __readr__ package, a __tidyverse__ package. These __functions__ are designed for improved performance, readability, and compatibility with modern data formats. \n\nMany of the functions defined in the __readr__ package share similar names with the base R counterparts. For instance, if you've worked with R's base functionality, you're likely familiar with the `read.csv()` function for reading comma-separated value files. In the __readr__ package, a parallel function with a nearly identical name, `read_csv()`, offers enhanced capabilities while maintaining a sense of familiarity.\n\n## Tidy Data\n\nData imported into R might not be structured as an __analytic base table format__. Basic quality issues can be quickly fixed using `dplyr` functions e.g. \n\n| Issue | `dplyr` function |\n| --- | --- |\n| Fix column names | rename() |\n| Remove columns | select() |\n| Fix column type | mutate() + as.function |\n| Remove rows | filter() |\n| Replace missing values | mutate() + ifelse() |\n\nFor more advance restructuring functions from the package `tidyr` can be used; a `tidyverse` package. \n\nSome key functions in the package `tidyr` include\n\n  - `separate()`: separates the values in one column into multiple columns\n  - `pivot_wider()`: groups single observations scattered across multiple rows into one row by creating additional columns and\n  - `pivot_longer()`: converts values spread across multiple columns into a name column that stores the original column names and a value column that stores the original values\n  \nTo illustrate how these functions work we will use an example:\n  \nAssume we have a data set that records the absolute number of people diagnosed with tuberculosis (TB) per country per year. This data can be recorded in several ways. \n\nHowever, in general, to calculate the rate of TB cases per country per year i.e. the number of people per 10,000 diagnosed with TB, four operations have to be performed:\n\n1. we have to extract the number of TB cases per country per year,\n2. extract the population per country per year,\n3. divide cases by population and\n4. multiply the answer by 0.01\n\n### Separate\n\nThe function `separate()` can be used to split the values in a column into multiple columns. When splitting a column into multiple columns we need to decide (i) how the split should occur and (ii) what to name the new columns. The argument `sep` of the function `separate()` can be used to specify the delimiter to split values at or the position to split values at\n\n```{r tidy2, exercise=TRUE}\n\ndf \u003c- tibble(country = c(\"Afghanistan\", \"Afghanistan\", \"Brazil\", \"Brazil\", \"China\", \"China\"),\n       year = c(1999, 2000, 1999, 2000, 1999, 2000),\n       rate = c(\"745/19.9\", \"2666/20.6\", \"37737/172.0\", \"80488/174.5\", \"212258/1272.9\", \"213766/1280.4\"))\n\nhead(df)\n\ndf %\u003e% separate(col = \"rate\", # column to split \n                into = c(\"cases\", \"population\"), # new column names \n                sep = \"/\") # delimiter\n\n```\n\nThe function `separate()` by default splits a character column into multiple character columns. The default argument convert of the function `separate()` can be used to automatically convert the new columns into the correct data type\n\n```{r tidy3, exercise=TRUE}\n\ndf \u003c- tibble(country = c(\"Afghanistan\", \"Afghanistan\", \"Brazil\", \"Brazil\", \"China\", \"China\"),\n       year = c(1999, 2000, 1999, 2000, 1999, 2000),\n       rate = c(\"745/19.9\", \"2666/20.6\", \"37737/172.0\", \"80488/174.5\", \"212258/1272.9\", \"213766/1280.4\"))\n\nhead(df)\n\ndf %\u003e% separate(col = \"rate\", # column to split \n                into = c(\"cases\", \"population\"), # new column names \n                sep = \"/\", # delimiter\n                convert = TRUE) %\u003e% # convert columns to appropriate types automatically  \n  str()\n```\n\n### pivot_wider\n\n`pivot_wider()` makes a data set longer by increasing the number of rows and decreasing the number of columns\n\nWhen we have a data set, where observations span multiple rows, the function `pivot_wider()` can be used to transform the data set to a `tidy` format. The function `pivot_wider()` increases the number of columns of a data set by decreasing the number of rows\n\n```{r tidy4, exercise=TRUE}\n\ndf \u003c- tibble(country = c(\"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Brazil\", \"Brazil\",\"Brazil\", \"Brazil\", \"China\", \"China\",\"China\", \"China\"),\n       year = c(1999, 1999, 2000, 2000, 1999, 1999, 2000, 2000, 1999, 1999, 2000, 2000),\n       type = rep(c(\"cases\", \"population\"),6),\n       value = c(745, 19.9, 2666, 20.6, 37737, 172, 80488, 174.5, 212258, 1272.9, 213766, 1280.4))\n\nhead(df)\n\ndf %\u003e% pivot_wider(names_from = \"type\", \n                   values_from = \"value\")\n\n```\n\nThe function `pivot_wider()` will assign data types to the new columns based on the values in the columns\n\n### pivot_longer\n\n`pivot_longer()` makes a data set longer by increasing the number of rows and decreasing the number of columns \nWhen we have a data set, where a variable is stored across a set of columns, the function `pivot_longer()` can be used to transform the data set to the `tidy` format. The function `pivot_longer()` increases the number of rows of a data set by decreasing the number of columns\n\n```{r tidy5, exercise=TRUE}\n\ndf \u003c- tibble(country = c(\"Afghanistan\", \"Brazil\",\"China\"),\n             \"1999\" = c(745, 37737, 212258),\n             \"2000\" = c(2666, 80488, 213766))\nhead(df)\n\ndf %\u003e% pivot_longer(c(2,3))\n\n```\n\nThe output produced by `pivot_longer()` has two main problems (i) the new column names are not descriptive and (ii) the values stored in the column name will be automatically stored as characters\n\nWhen using the function `pivot_longer()` the arguments:\n\n  - `names_to` can be used to assign a name to the column that contains the old column names,\n  - `values_to` can be used to assign a name to the column that contains the values and\n  - `names_transform` can be used to change the data type used for the name column \n\n```{r tidy6, exercise=TRUE}\n\ndf \u003c- tibble(country = c(\"Afghanistan\", \"Brazil\",\"China\"),\n             \"1999\" = c(745, 37737, 212258),\n             \"2000\" = c(2666, 80488, 213766))\nhead(df)\n\ndf %\u003e% pivot_longer(cols = c(2,3), \n                    names_to = \"date\", \n                    names_transform = list(\"date\" = as.numeric), \n                    values_to = \"cases\")\n\n\n```\n\n\n## Joining Data From Multiple Sources\n\nWe have discussed various functions to manipulate and reshape a single data frame, but what happens if our data is in separate data frames? \n\n-   Bind functions: Bind functions can be used to add rows or columns to a data frame \n-   Join functions: Join functions can be used to merge two data frames based on specific conditions\n\n![[Combine.png]]\n\n\n## Adding Rows\n\nRows can be added to a data frame using the function `rbind()`. However, `rbind()` will coarse all values to a compatible data type\n\n```{r rbind, exercise=TRUE}\ntibble_A \u003c- tibble(\"ID\" = c(1:3), \"Dummy\" = letters[1:3])\ntibble_B \u003c- tibble(\"ID\" = letters[1:3], \"Dummy\" = letters[4:6]) \nrbind(tibble_A, tibble_B)\n```\n\nNote from the example above that both columns are changed to type `character`. \n\nThe package `dplyr` provides an alternative function to add rows to a data frame, namely `bind_rows()`. Unlike `rbind()` the function `bind_rows()` will show an error when the data type of columns are not the same\n\n```{r rbind2, exercise=TRUE}\ntibble_A \u003c- tibble(\"ID\" = c(1:3), \"Dummy\" = letters[1:3]) \ntibble_B \u003c- tibble(\"ID\" = letters[1:3], \"Dummy\" = letters[4:6]) \nbind_rows(tibble_A, tibble_B)\n```\n\nWhen rows are added to a data frame using `rbind()` both data frames must have the same columns. If the columns differ, R will show an error e.g.\n\n```{r rbind3, exercise=TRUE}\nrbind(tibble(\"ID\" = 1, \"Value\" = 1), tibble(\"ID\" = 1))\n```\n\nHowever, when the function `bind_rows()` is used to add rows to a data frame, the values of missing columns are filled with missing values i.e. `NA` \n\n```{r rbind4, exercise=TRUE}\nbind_rows(tibble(\"ID\" = 1, \"Value\" = 1), tibble(\"ID\" = 1))\n```\n\n## Adding Columns\n\nColumns can be added to a data frame using the function `cbind()`. However, the function `cbind()` does not check that duplicate column names are introduced\n\n```{r cbind, exercise=TRUE}\ncbind(tibble(\"ID\" = 1, \"Value\" = 1), tibble(\"ID\" = 1))\n```\n\nIn the example above we end up with two columns with the same name. Columns with non-unique names are difficult to select. The function `cbind()` also does not allow a column or multiple columns to be added with a different number of elements e.g.\n\n```{r cbind2, exercise=TRUE}\ncbind(tibble(\"ID\" = 1:2, \"Value\" = 1:2), tibble(\"ID\" = 1:3))\n```\n\nHowever, a column that contains one value will be repeated e.g. \n\n```{r cbind3, exercise=TRUE}\ncbind(tibble(\"ID\" = 1:2, \"Value\" = 1:2), tibble(\"ID\" = 1:3))\n```\n\nThe package `dplyr` provides an alternative function to add columns to a data frame, namely `bind_cols()`. The function `bind_cols()` automatically corrects duplicate column names \n\n```{r cbind4, exercise=TRUE}\nbind_cols(tibble(\"ID\" = 1, \"Value\" = 1), tibble(\"ID\" = 1))\n```\n\nbut will also show an error when trying to add columns with a different number of elements. \n\nIn general using the functions `bind_rows()` and `bind_cols()` are recommended. \n\n## Join\n\nWhen data is stored in separate data sets we need a method to join or combine the data sets into one data set. Joining operations allows us to merge two data sets using conditions.\n\nWhen deciding how data sets should be joined, we generally consider:\n\n  - which rows to keep or remove,\n  - the columns to keep or remove and\n  - which matching conditions to use\n\n![[Join.png]]\n\n\nThe `dplyr` packages contain various join functions. Perhaps the most commonly used join function is `left_join()`.\n\n__Example 1__\n\nConsider the data set A that consists of two features: an ID and feature X1. Data set B also consists of two features: an ID and feature X2. When we perform a `left_join()`, all the instances of data set A is kept, but we add information to data set A from data set B by matching on ID. More specifically the feature X2 is added. \n\nTo illustrate how a left join can be performed we will use data sets from the `nycflights13` package. The nycflights13 package contains five data frames:\n\n  - flights: contains information on all flights that departed from New York City in 2013\n  - airlines: contains airline abbreviations\n  - airports: contains airport metadata\n  - planes: contains aeroplane metadata\n  - weather: contains hourly weather data from JFK, LGA and EWR\n  \nWe first, load the `nycflights13` data set and the data frame `flights`\n\n```{r flight, exercise=TRUE}\nlibrary(nycflights13)\ndata(flights) # running this command will store the data frame in the objects flights\n```\n\nWe can view the instances of the data frame `flights` by using the function `head()`\n\n```{r flight1, exercise=TRUE}\nhead(flights)\n```\n\nGiven the data, suppose we are interested in calculating which airline had the most flights to Seattle from New York. We start by filtering our data set to get all the flights to Seattle. Once we have collected all the data instances we perform a group by operation and count the number of instances per carrier. Finally, sorting the results helps us to quickly see which carrier had the most flights\n\n```{r flight2, exercise=TRUE}\nflights %\u003e% \n  filter(dest == \"SEA\") %\u003e% # get all flights to Seattle \n  select(carrier) %\u003e% # select carrier code \n  group_by(carrier) %\u003e% # group data by name \n  summarise(count = n()) %\u003e% # provide the current group size \n  arrange(desc(count)) # sort on count\n```\n\nThe above analysis work, but which aeroplane carrier is DL? The results only show the number of flights per carrier code; rather than the name of the carrier. Luckily we have collected an additional data set that contains the name of the carrier. \n\n```{r flight3, exercise=TRUE}\nairlines %\u003e%\n  head()\n```\n\nThe `airlines` data frame contains the full name of the carrier along with the carrier code. To add the name of the airline we perform a simple left join:\n\n```{r flight4, exercise=TRUE}\nflights %\u003e% \n  filter(dest == \"SEA\") %\u003e% # get all flights to Seattle \n  select(carrier) %\u003e% # select carrier code \n  left_join(airlines) %\u003e% # add airline names \n  group_by(name) %\u003e% # group data by name \n  summarise(count = n()) %\u003e% # provide the current group size \n  arrange(desc(count)) # sort on count\n```\n\n__Example 2__\n\nSuppose we are inserted in determining whether there is a relationship between the age of a plane and delays. The departure and arrival delay times are available in the flight data set. However, the age of an aeroplane is only available in the planes data set\n\n![[Relationship2.png|400]]\n\nTo add the age of aeroplanes a left join is performed using the column tailnum  \n\n```{r flight5, exercise=TRUE}\nflights %\u003e% \n  select(dep_delay, tailnum) %\u003e% \n  left_join(planes, by = c(\"tailnum\")) %\u003e% \n  mutate(age = 2013 - year) %\u003e% \n  select(tailnum, dep_delay, age) %\u003e% \n  group_by(age) %\u003e% \n  summarise(delay = mean(dep_delay, na.rm = TRUE))\n```\n  \n  \n### Type of joins\n\nThe package `dplyr` contains several different join functions\n  \n\n| function | rows | columns |\n| --- | --- | --- |\n| `A %\u003e% left_join(B)` | Keep all rows from A | Keep all columns |\n| `A %\u003e% right_join(B)` | Keep all rows from B | Keep all columns |\n| `A %\u003e% inner_join(B)` | Keep only rows from A that match with B | Keep all columns |\n| `A %\u003e% full_join(B)` | Keep all rows from A and B | Keep all columns |\n| `A %\u003e% semi_join(B)` | Keep rows from A that match B | Keep columns from A |\n| `A %\u003e% anti_join(B)` | Keep rows from A that do not match B | Keep columns from A |\n\n![[TypeofJoins.png]]\n\nWe say rows match because they have some columns containing the same value. The matching conditions are specified using the `by` argument \n\nMatching behaviour\n\n- When no argument is passed to the by argument, matching is performed on all columns of A and B with identical column names\n- `by = c(col1, col2, col3)`, matching is performed on all identical values in col1, col2 and col3 of data set A and data set B\n- `by = c(Acol1= Bcol1, Acol2 = Bcol2)`, matching is performed on values of Acol1 of data set A to the values of Bcol1 of data set B, and the values of Acol2 of data set A to the values of Bcol2 of data set B\n\nIf multiple matches are possible, a row for each possible combination will be returned, except with `semi_join()` and `anti_join()`\n\n","lastmodified":"2023-08-16T12:08:43.38338855Z","tags":[]},"/Week-1":{"title":"Week 1","content":"\n- [[R Week 1]]\n- [[Topic 1 intro to DA.pdf]]]\n- [[Topic 2 data to insights to decisions.pdf]]\n- [[Tut 1.pdf]]\n","lastmodified":"2023-08-16T12:08:43.38338855Z","tags":[]},"/Week-2":{"title":"Week 2","content":"\n- [[R Week 2]]\n- [[Week 2 topic 3 Data Exploration pt1.pdf]]\n- [[Tut 2.pdf]]","lastmodified":"2023-08-16T12:08:43.38338855Z","tags":[]},"/Week-3":{"title":"Week 3","content":"\n- [[R Week 3]]\n- [[Week 3 topic 3 data exploration pt 2.pdf]]\n- [[Tut 3.pdf]]","lastmodified":"2023-08-16T12:08:43.38338855Z","tags":[]},"/Week-4":{"title":"Week 4","content":"[[R Week 4]]\n","lastmodified":"2023-08-16T12:08:43.38338855Z","tags":[]},"/notes/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95":{"title":"CJK + Latex Support (测试)","content":"\n## Chinese, Japanese, Korean Support\n几乎在我们意识到之前，我们已经离开了地面。\n\n우리가 그것을 알기도 전에 우리는 땅을 떠났습니다.\n\n私たちがそれを知るほぼ前に、私たちは地面を離れていました。\n\n## Latex\n\nBlock math works with two dollar signs `$$...$$`\n\n$$f(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi$$\n\t\nInline math also works with single dollar signs `$...$`. For example, Euler's identity but inline: $e^{i\\pi} = -1$\n\nAligned equations work quite well:\n\n$$\n\\begin{aligned}\na \u0026= b + c \\\\ \u0026= e + f \\\\\n\\end{aligned}\n$$\n\nAnd matrices\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \\\\\na \u0026 b \u0026 c\n\\end{bmatrix}\n$$\n\n## RTL\nMore information on configuring RTL languages like Arabic in the [config](notes/config.md) page.\n","lastmodified":"2023-08-16T12:08:43.587400883Z","tags":[]},"/notes/callouts":{"title":"Callouts","content":"\n## Callout support\n\nQuartz supports the same Admonition-callout syntax as Obsidian.\n\nThis includes\n- 12 Distinct callout types (each with several aliases)\n- Collapsable callouts\n\nSee [documentation on supported types and syntax here](https://help.obsidian.md/Editing+and+formatting/Callouts).\n\n## Showcase\n\n\u003e [!EXAMPLE] Examples\n\u003e\n\u003e Aliases: example\n\n\u003e [!note] Notes\n\u003e\n\u003e Aliases: note\n\n\u003e [!abstract] Summaries \n\u003e\n\u003e Aliases: abstract, summary, tldr\n\n\u003e [!info] Info \n\u003e\n\u003e Aliases: info, todo\n\n\u003e [!tip] Hint \n\u003e\n\u003e Aliases: tip, hint, important\n\n\u003e [!success] Success \n\u003e\n\u003e Aliases: success, check, done\n\n\u003e [!question] Question \n\u003e\n\u003e Aliases: question, help, faq\n\n\u003e [!warning] Warning \n\u003e\n\u003e Aliases: warning, caution, attention\n\n\u003e [!failure] Failure \n\u003e\n\u003e Aliases: failure, fail, missing\n\n\u003e [!danger] Error\n\u003e\n\u003e Aliases: danger, error\n\n\u003e [!bug] Bug\n\u003e\n\u003e Aliases: bug\n\n\u003e [!quote] Quote\n\u003e\n\u003e Aliases: quote, cite\n","lastmodified":"2023-08-16T12:08:43.587400883Z","tags":[]},"/notes/config":{"title":"Configuration","content":"\n## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml {title=\"data/config.yaml\"}\n# The name to display in the footer\nname: Jacky Zhao\n\n# whether to globally show the table of contents on each page\n# this can be turned off on a per-page basis by adding this to the\n# front-matter of that note\nenableToc: true\n\n# whether to by-default open or close the table of contents on each page\nopenToc: false\n\n# whether to display on-hover link preview cards\nenableLinkPreview: true\n\n# whether to render titles for code blocks\nenableCodeBlockTitle: true \n\n# whether to render copy buttons for code blocks\nenableCodeBlockCopy: true \n\n# whether to render callouts\nenableCallouts: true\n\n# whether to try to process Latex\nenableLatex: true\n\n# whether to enable single-page-app style rendering\n# this prevents flashes of unstyled content and improves\n# smoothness of Quartz. More info in issue #109 on GitHub\nenableSPA: true\n\n# whether to render a footer\nenableFooter: true\n\n# whether backlinks of pages should show the context in which\n# they were mentioned\nenableContextualBacklinks: true\n\n# whether to show a section of recent notes on the home page\nenableRecentNotes: false\n\n# whether to display an 'edit' button next to the last edited field\n# that links to github\nenableGitHubEdit: true\nGitHubLink: https://github.com/jackyzha0/quartz/tree/hugo/content\n\n# whether to render mermaid diagrams\nenableMermaid: true\n\n# whether to use Operand to power semantic search\n# IMPORTANT: replace this API key with your own if you plan on using\n# Operand search!\nsearch:\n  enableSemanticSearch: false\n  operandApiKey: \"REPLACE-WITH-YOUR-OPERAND-API-KEY\"\n  operandIndexId: \"REPLACE-WITH-YOUR-OPERAND-INDEX-ID\"\n\n# page description used for SEO\ndescription:\n  Host your second brain and digital garden for free. Quartz features extremely fast full-text search,\n  Wikilink support, backlinks, local graph, tags, and link previews.\n\n# title of the home page (also for SEO)\npage_title:\n  \"🪴 Quartz 3.3\"\n\n# links to show in the footer\nlinks:\n  - link_name: Twitter\n    link: https://twitter.com/_jzhao\n  - link_name: Github\n    link: https://github.com/jackyzha0\n```\n\n### Code Block Titles\nTo add code block titles with Quartz:\n\n1. Ensure that code block titles are enabled in Quartz's configuration:\n\n    ```yaml {title=\"data/config.yaml\", linenos=false}\n    enableCodeBlockTitle: true\n    ```\n\n2. Add the `title` attribute to the desired [code block\n   fence](https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences):\n\n      ```markdown {linenos=false}\n       ```yaml {title=\"data/config.yaml\"}\n       enableCodeBlockTitle: true  # example from step 1\n       ```\n      ```\n\n**Note** that if `{title=\u003cmy-title\u003e}` is included, and code block titles are not\nenabled, no errors will occur, and the title attribute will be ignored.\n\n### HTML Favicons\nIf you would like to customize the favicons of your Quartz-based website, you \ncan add them to the `data/config.yaml` file. The **default** without any set \n`favicon` key is:\n\n```html {title=\"layouts/partials/head.html\", linenostart=15}\n\u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n```\n\nThe default can be overridden by defining a value to the `favicon` key in your \n`data/config.yaml` file. For example, here is a `List[Dictionary]` example format, which is\nequivalent to the default:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon:\n  - { rel: \"shortcut icon\", href: \"icon.png\", type: \"image/png\" }\n#  - { ... } # Repeat for each additional favicon you want to add\n```\n\nIn this format, the keys are identical to their HTML representations.\n\nIf you plan to add multiple favicons generated by a website (see list below), it\nmay be easier to define it as HTML. Here is an example which appends the \n**Apple touch icon** to Quartz's default favicon:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon: |\n  \u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n  \u003clink rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\"\u003e\n```\n\nThis second favicon will now be used as a web page icon when someone adds your \nwebpage to the home screen of their Apple device. If you are interested in more \ninformation about the current and past standards of favicons, you can read \n[this article](https://www.emergeinteractive.com/insights/detail/the-essentials-of-favicons/).\n\n**Note** that all generated favicon paths, defined by the `href` \nattribute, are relative to the `static/` directory.\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml {title=\"data/graphConfig.yaml\"}\n# if true, a Global Graph will be shown on home page with full width, no backlink.\n# A different set of Local Graphs will be shown on sub pages.\n# if false, Local Graph will be default on every page as usual\nenableGlobalGraph: false\n\n### Local Graph ###\nlocalGraph:\n    # whether automatically generate a legend\n    enableLegend: false\n    \n    # whether to allow dragging nodes in the graph\n    enableDrag: true\n    \n    # whether to allow zooming and panning the graph\n    enableZoom: true\n    \n    # how many neighbours of the current node to show (-1 is all nodes)\n    depth: 1\n    \n    # initial zoom factor of the graph\n    scale: 1.2\n    \n    # how strongly nodes should repel each other\n    repelForce: 2\n\n    # how strongly should nodes be attracted to the center of gravity\n    centerForce: 1\n\n    # what the default link length should be\n    linkDistance: 1\n    \n    # how big the node labels should be\n    fontSize: 0.6\n    \n    # scale at which to start fading the labes on nodes\n    opacityScale: 3\n\n### Global Graph ###\nglobalGraph:\n\t# same settings as above\n\n### For all graphs ###\n# colour specific nodes path off of their path\npaths:\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Language Support\n[CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'مدونتي'\n    weight = 1\n```\n","lastmodified":"2023-08-16T12:08:43.587400883Z","tags":["setup"]},"/notes/custom-Domain":{"title":"Custom Domain","content":"\n### Registrar\nThis step is only applicable if you are using a **custom domain**! If you are using a `\u003cYOUR-USERNAME\u003e.github.io` domain, you can skip this step.\n\nFor this last bit to take effect, you also need to create a CNAME record with the DNS provider you register your domain with (i.e. NameCheap, Google Domains).\n\nGitHub has some [documentation on this](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site), but the tldr; is to\n\n1. Go to your forked repository (`github.com/\u003cYOUR-GITHUB-USERNAME\u003e/quartz`) settings page and go to the Pages tab. Under \"Custom domain\", type your custom domain, then click **Save**.\n2. Go to your DNS Provider and create a CNAME record that points from your domain to `\u003cYOUR-GITHUB-USERNAME.github.io.` (yes, with the trailing period).\n\n\t![Example Configuration for Quartz](/notes/images/google-domains.png)*Example Configuration for Quartz*\n3. Wait 30 minutes to an hour for the network changes to kick in.\n4. Done!","lastmodified":"2023-08-16T12:08:43.587400883Z","tags":[]},"/notes/docker":{"title":"Hosting with Docker","content":"\nIf you want to host Quartz on a machine without using a webpage hosting service, it may be easier to [install Docker Compose](https://docs.docker.com/compose/install/) and follow the instructions below than to [install Quartz's dependencies manually](notes/preview%20changes.md).\n## Hosting Quartz Locally\nYou can serve Quartz locally at `http://localhost:1313` with the following script, replacing `/path/to/quartz` with the \nactual path to your Quartz folder.\n\ndocker-compose.yml\n```\nservices:\n  quartz-hugo:\n    image: ghcr.io/jackyzha0/quartz:hugo\n    container_name: quartz-hugo\n    volumes:\n      - /path/to/quartz:/quartz\n    ports:\n      - 1313:1313\n\n    # optional\n    environment:\n      - HUGO_BIND=0.0.0.0\n      - HUGO_BASEURL=http://localhost\n      - HUGO_PORT=1313\n      - HUGO_APPENDPORT=true\n      - HUGO_LIVERELOADPORT=-1\n```\n\nThen run with: `docker-compose up -d` in the same directory as your `docker-compose.yml` file.\n\nWhile the container is running, you can update the `quartz` fork with: `docker exec -it quartz-hugo make update`.\n\n## Exposing Your Container to the Internet\n\n### To Your Public IP Address with Port Forwarding (insecure)\n\nAssuming you are already familiar with [port forwarding](https://en.wikipedia.org/wiki/Port_forwarding) and [setting it up with your router model](https://portforward.com):\n\n1. You should set the environment variable `HUGO_BASEURL=http://your-public-ip` and then start your container.\n2. Set up port forwarding on your router from port `p` to `your-local-ip:1313`.\n3. You should now be able to access Quartz from outside your local network at `http://your-public-ip:p`.\n\nHowever, your HTTP connection will be unencrypted and **this method is not secure**.\n\n### To a Domain using Cloudflare Proxy\n\n1. Port forward 443 (HTTPS) from your machine.\n2. Buy a custom domain (say, `your-domain.com`) from [Cloudflare](https://www.cloudflare.com/products/registrar/). Point a DNS A record from `your-domain.com` to your public IP address and enable the proxy.\n3. Set the environment variables `HUGO_BASEURL=https://your-domain.com`, `HUGO_PORT=443`, and `HUGO_APPENDPORT=false`. Change `1313:1313` to `443:443` for the `ports` in `docker-compose.yml`.\n4. Spin up your Quartz container and enjoy it at `https://your-domain.com`!\n\n### To a Domain using a Reverse Proxy\n\nIf you want to serve more than just Quartz to the internet on this machine (or don't want to use the Cloudflare registrar and proxy), you should follow the steps in the section above (as appropriate) and also set up a reverse proxy, like [Traefik](https://doc.traefik.io/traefik). Be sure to configure your TLS certificates too!\n","lastmodified":"2023-08-16T12:08:43.587400883Z","tags":["setup"]},"/notes/editing":{"title":"Editing Content in Quartz","content":"\n## Editing \nQuartz runs on top of [Hugo](https://gohugo.io/) so all notes are written in [Markdown](https://www.markdownguide.org/getting-started/).\n\n### Folder Structure\nHere's a rough overview of what's what.\n\n**All content in your garden can found in the `/content` folder.** To make edits, you can open any of the files and make changes directly and save it. You can organize content into any folder you'd like.\n\n**To edit the main home page, open `/content/_index.md`.**\n\n### Front Matter\nHugo is picky when it comes to metadata for files. Make sure that your title is double-quoted and that you have a title defined at the top of your file like so, otherwise the generated page will not have a title!\n\nYou can also add tags here as well.\n\n```yaml\n---\ntitle: \"Example Title\"\ntags:\n- example-tag\n---\n\nRest of your content here...\n```\n\n### Obsidian\nI recommend using [Obsidian](http://obsidian.md/) as a way to edit and grow your digital garden. It comes with a really nice editor and graphical interface to preview all of your local files.\n\nThis step is **highly recommended**.\n\n\u003e 🔗 Step 3: [How to setup your Obsidian Vault to work with Quartz](notes/obsidian.md)\n\n## Previewing Changes\nThis step is purely optional and mostly for those who want to see the published version of their digital garden locally before opening it up to the internet. This is *highly recommended* but not required.\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)\n\nFor those who like to live life more on the edge, viewing the garden through Obsidian gets you pretty close to the real thing.\n\n## Publishing Changes\nNow that you know the basics of managing your digital garden using Quartz, you can publish it to the internet!\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2023-08-16T12:08:43.587400883Z","tags":["setup"]},"/notes/hosting":{"title":"Deploying Quartz to the Web","content":"\n## Hosting on GitHub Pages\nQuartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.\n\n### Enable GitHub Actions Permissions\nBy default, GitHub disables workflows from modifying your files (for good reason!). However, Quartz needs this to write the actual site files back to GitHub.\n\nHead to `Settings \u003e Action \u003e General \u003e Workflow Permissions` and choose `Read and Write Permissions`\n\n![[notes/images/github-actions.png]]\n*Enable GitHub Actions*\n\n### Enable GitHub Pages\n\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\n\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\n2. Set a custom domain here if you have one!\n\n![Enable GitHub Pages](/notes/images/github-pages.png)*Enable GitHub Pages*\n\n### Pushing Changes\nTo see your changes on the internet, we need to push it them to GitHub. Quartz is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\n\n```shell\n# Navigate to Quartz folder\ncd \u003cpath-to-quartz\u003e\n\n# Commit all changes\ngit add .\ngit commit -m \"message describing changes\"\n\n# Push to GitHub to update site\ngit push origin hugo\n```\n\nNote: we specifically push to the `hugo` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `master` branch for redeployment.\n\n### Setting up the Site\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to subdomain your Quartz? That's easy too.\n\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`. \n\nMake sure that your `baseURL` has a trailing `/`!\n\n[Reference `config.toml` here](https://github.com/jackyzha0/quartz/blob/hugo/config.toml)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz`), include the trailing `/`. **You need to do this especially if you are using GitHub!**\n\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\n\nPlease note that the `cname` field should *not* have any path `e.g. end with /quartz` or have a trailing `/`.\n\n[Reference `deploy.yaml` here](https://github.com/jackyzha0/quartz/blob/hugo/.github/workflows/deploy.yaml)\n\n```yaml {title=\".github/workflows/deploy.yaml\"}\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\nHave a custom domain? [Learn how to set it up with Quartz ](notes/custom%20Domain.md).\n\n### Ignoring Files\nOnly want to publish a subset of all of your notes? Don't worry, Quartz makes this a simple two-step process.\n\n❌ [Excluding pages from being published](notes/ignore%20notes.md)\n\n## Docker Support\nIf you don't want to use a hosting service, you can host using [Docker](notes/docker.md) instead!\nI would *not use this method* unless you know what you are doing.\n\n---\n\nNow that your Quartz is live, let's figure out how to make Quartz really *yours*!\n\n\u003e Step 6: 🎨 [Customizing Quartz](notes/config.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2023-08-16T12:08:43.587400883Z","tags":["setup"]},"/notes/ignore-notes":{"title":"Ignoring Notes","content":"\n### Quartz Ignore\nEdit `ignoreFiles` in `config.toml` to include paths you'd like to exclude from being rendered.\n\n```toml\n...\nignoreFiles = [  \n    \"/content/templates/*\",  \n    \"/content/private/*\", \n    \"\u003cyour path here\u003e\"\n]\n```\n\n`ignoreFiles` supports the use of Regular Expressions (RegEx) so you can ignore patterns as well (e.g. ignoring all `.png`s by doing `\\\\.png$`).\nTo ignore a specific file, you can also add the tag `draft: true` to the frontmatter of a note.\n\n```markdown\n---\ntitle: Some Private Note\ndraft: true\n---\n...\n```\n\nMore details in [Hugo's documentation](https://gohugo.io/getting-started/configuration/#ignore-content-and-data-files-when-rendering).\n\n### Global Ignore\nHowever, just adding to the `ignoreFiles` will only prevent the page from being access through Quartz. If you want to prevent the file from being pushed to GitHub (for example if you have a public repository), you need to also add the path to the `.gitignore` file at the root of the repository.","lastmodified":"2023-08-16T12:08:43.587400883Z","tags":[]},"/notes/obsidian":{"title":"Obsidian Vault Integration","content":"\n## Setup\nObsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.\n\n### New Vault\nIf you don't have an existing Vault, [download Obsidian](https://obsidian.md/) and create a new Vault in the `/content` folder that you created and cloned during the [setup](notes/setup.md) step.\n\n### Linking an existing Vault\nThe easiest way to use an existing Vault is to copy all of your files (directory and hierarchies intact) into the `/content` folder.\n\n## Settings\nGreat, now that you have your Obsidian linked to your Quartz, let's fix some settings so that they play well.\n\nOpen Settings \u003e Files \u0026 Links and look for these two items:\n\n1. Set the **New link format** to **Absolute Path in vault**. If you have a completely flat vault (no folders), this step isn't necessary.\n2. Turn **on** the **Automatically update internal links** setting.\n\n\n![[notes/images/obsidian-settings.png]]*Obsidian Settings*\n\n## Templates\nInserting front matter everytime you want to create a new Note gets annoying really quickly. Luckily, Obsidian supports templates which makes inserting new content really easily.\n\n\u003e [!WARNING]\n\u003e \n\u003e **If you decide to overwrite the `/content` folder completely, don't remove the `/content/templates` folder!**\n\nHead over to Options \u003e Core Plugins and enable the Templates plugin. Then go to Options \u003e Hotkeys and set a hotkey for 'Insert Template' (I recommend `[cmd]+T`). That way, when you create a new note, you can just press the hotkey for a new template and be ready to go!\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)\n","lastmodified":"2023-08-16T12:08:43.591401125Z","tags":["setup"]},"/notes/philosophy":{"title":"Quartz Philosophy","content":"\n\u003e “[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.” — Richard Hamming\n\n## Why Quartz?\nHosting a public digital garden isn't easy. There are an overwhelming number of tutorials, resources, and guides for tools like [Notion](https://www.notion.so/), [Roam](https://roamresearch.com/), and [Obsidian](https://obsidian.md/), yet none of them have super easy to use *free* tools to publish that garden to the world.\n\nI've personally found that\n1. It's nice to access notes from anywhere\n2. Having a public digital garden invites open conversations\n3. It makes keeping personal notes and knowledge *playful and fun*\n\nI was really inspired by [Bianca](https://garden.bianca.digital/) and [Joel](https://joelhooks.com/digital-garden)'s digital gardens and wanted to try making my own.\n\n**The goal of Quartz is to make hosting your own public digital garden free and simple.** You don't even need your own website. Quartz does all of that for you and gives your own little corner of the internet.\n","lastmodified":"2023-08-16T12:08:43.591401125Z","tags":[]},"/notes/preview-changes":{"title":"Preview Changes","content":"\nIf you'd like to preview what your Quartz site looks like before deploying it to the internet, the following\ninstructions guide you through installing the proper dependencies to run it locally.\n\n\n## Install `hugo-obsidian`\nThis step will generate the list of backlinks for Hugo to parse. Ensure you have [Go](https://golang.org/doc/install) (\u003e= 1.16) installed.\n\n```bash\n# Install and link `hugo-obsidian` locally\ngo install github.com/jackyzha0/hugo-obsidian@latest\n```\n\nIf you are running into an error saying that `command not found: hugo-obsidian`, make sure you set your `GOPATH` correctly (see [[notes/troubleshooting#`command not found: hugo-obsidian`|the troubleshooting page]])! This will allow your terminal to correctly recognize hugo-obsidian as an executable.\n\n##  Installing Hugo\nHugo is the static site generator that powers Quartz. [Install Hugo with \"extended\" Sass/SCSS version](https://gohugo.io/getting-started/installing/) first. Then,\n\n```bash\n# Navigate to your local Quartz folder\ncd \u003clocation-of-your-local-quartz\u003e\n\n# Start local server\nmake serve\n\n# View your site in a browser at http://localhost:1313/\n```\n\n\u003e [!INFO] Docker Support\n\u003e\n\u003e If you have the Docker CLI installed already, you can avoid installing `hugo-obsidian` and `hugo`. Instead, open your terminal, navigate to your folder with Quartz and run `make docker`\n\nAfterwards, start the Hugo server as shown above and your local backlinks and interactive graph should be populated! Now, let's get it hosted online.\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)\n","lastmodified":"2023-08-16T12:08:43.591401125Z","tags":["setup"]},"/notes/search":{"title":"Search","content":"\nQuartz supports two modes of searching through content.\n\n## Full-text\nFull-text search is the default in Quartz. It produces results that *exactly* match the search query. This is easier to setup but usually produces lower quality matches.\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nenableSemanticSearch: false\n```\n\n## Natural Language\nNatural language search is powered by [Operand](https://beta.operand.ai/). It understands language like a person does and finds results that best match user intent. In this sense, it is closer to how Google Search works.\n\nNatural language search tends to produce higher quality results than full-text search.\n\nHere's how to set it up.\n\n1. Login or Register for a new Operand account. Click the verification link sent to your email, and you'll be redirected to the dashboard. (Note) You do not need to enter a credit card to create an account, or get started with the Operand API. The first $10 of usage each month is free. To learn more, see pricing. If you go over your free quota, we'll (politely) reach out and ask you to configure billing.\n2. Create your first index. On the dashboard, under \"Indexes\", enter the name and description of your index, and click \"Create Index\". Note down the ID of the index (obtained by clicking on the index name in the list of indexes), as you'll need it in the next step. IDs are unique to each index, and look something like `uqv1duxxbdxu`.\n3. Click into the index you've created. Under \"Index Something\", select \"SITEMAP\" from the dropdown and click \"Add Source\".\n4. For the \"Sitemap.xml URL\", put your deployed site's base URL followed by `sitemap.xml`. For example, for `quartz.jzhao.xyz`, put `https://quartz.jzhao.xyz/sitemap.xml`. Leave the URL Regex empty. \n5. Get your API key. On the dashboard, under \"API Keys\", you can manage your API keys. If you don't already have an API key, click \"Create API Key\". You'll need this for the next step.\n6. Open `data/config.yaml`. Set `enableSemanticSearch` to `true`, `operandApiKey` to your copied key, and `operandIndexId` to the ID of the index we created from earlier..\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nsearch:\n  enableSemanticSearch: true\n  operandApiKey: \"jp9k5hudse2a828z98kxd6z3payi8u90rnjf\"\n  operandIndexId: \"s0kf3bd6tldw\"\n```\n7. Push your changes to the site and wait for it to deploy.\n8. Check the Operand dashboard and wait for your site to index. Enjoy natural language search powered by Operand!\n","lastmodified":"2023-08-16T12:08:43.591401125Z","tags":[]},"/notes/setup":{"title":"Setup","content":"\n## Making your own Quartz\nSetting up Quartz requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\n\n### Forking\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nNavigate to the GitHub repository for the Quartz project:\n\n📁 [Quartz Repository](https://github.com/jackyzha0/quartz)\n\nThen, Fork the repository into your own GitHub account. **Make sure that when you fork, you _uncheck_ the 'Copy the `hugo` branch only' option**.\n\nIf you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\n\n![[notes/images/fork.png]]\n\n### Cloning\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command in your terminal replacing `YOUR-USERNAME` with your GitHub username.\n\n```shell\ngit clone https://github.com/YOUR-USERNAME/quartz\n```\n\n## Editing\nGreat! Now you have everything you need to start editing and growing your digital garden. If you're ready to start writing content already, check out the recommended flow for editing notes in Quartz.\n\n\u003e ✏️ Step 2: [Editing Notes in Quartz](notes/editing.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2023-08-16T12:08:43.591401125Z","tags":["setup"]},"/notes/showcase":{"title":"Showcase","content":"\nWant to see what Quartz can do? Here are some cool community gardens :)\n\n- [Quartz Documentation (this site!)](https://quartz.jzhao.xyz/)\n- [Jacky Zhao's Garden](https://jzhao.xyz/)\n- [Scaling Synthesis - A hypertext research notebook](https://scalingsynthesis.com/)\n- [AWAGMI Intern Notes](https://notes.awagmi.xyz/)\n- [Shihyu's PKM](https://shihyuho.github.io/pkm/)\n- [SlRvb's Site](https://slrvb.github.io/Site/)\n- [Course notes for Information Technology Advanced Theory](https://a2itnotes.github.io/quartz/)\n- [Brandon Boswell's Garden](https://brandonkboswell.com)\n- [Siyang's Courtyard](https://siyangsun.github.io/courtyard/)\n- [Data Dictionary 🧠](https://glossary.airbyte.com/)\n- [sspaeti.com's Second Brain](https://brain.sspaeti.com/)\n- [oldwinterの数字花园](https://garden.oldwinter.top/)\n- [SethMB Work](https://sethmb.xyz/)\n- [Abhijeet's Math Wiki](https://abhmul.github.io/quartz/Math-Wiki/)\n- [Mike's AI Garden 🤖🪴](https://mwalton.me/)\n\nIf you want to see your own on here, submit a [Pull Request adding yourself to this file](https://github.com/jackyzha0/quartz/blob/hugo/content/notes/showcase.md)!\n","lastmodified":"2023-08-16T12:08:43.591401125Z","tags":[]},"/notes/troubleshooting":{"title":"Troubleshooting and FAQ","content":"\nStill having trouble? Here are a list of common questions and problems people encounter when installing Quartz.\n\nWhile you're here, join our [Discord](https://discord.gg/cRFFHYye7t) :)\n\n### Does Quartz have Latex support?\nYes! See [CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) for a brief demo.\n\n### Can I use \\\u003cObsidian Plugin\\\u003e in Quartz?\nUnless it produces direct Markdown output in the file, no. There currently is no way to bundle plugin code with Quartz.\n\nThe easiest way would be to add your own HTML partial that supports the functionality you are looking for.\n\n### My GitHub pages is just showing the README and not Quartz\nMake sure you set the source to deploy from `master` (and not `hugo`) using `/ (root)`! See more in the [hosting](/notes/hosting) guide\n\n### Some of my pages have 'January 1, 0001' as the last modified date\nThis is a problem caused by `git` treating files as case-insensitive by default and some of your posts probably have capitalized file names. You can turn this off in your Quartz by running this command.\n\n```shell\n# in the root of your Quartz (same folder as config.toml)\ngit config core.ignorecase true\n\n# or globally (not recommended)\ngit config --global core.ignorecase true\n```\n\n### Can I publish only a subset of my pages?\nYes! Quartz makes selective publishing really easy. Heres a guide on [excluding pages from being published](notes/ignore%20notes.md).\n\n### Can I host this myself and not on GitHub Pages?\nYes! All built files can be found under `/public` in the `master` branch. More details under [hosting](notes/hosting.md).\n\n### `command not found: hugo-obsidian`\nMake sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize `hugo-obsidian` as an executable.\n\n```shell\n# Add the following 2 lines to your ~/.bash_profile (~/.zshrc if you are on Mac)\nexport GOPATH=/Users/$USER/go\nexport PATH=$GOPATH/bin:$PATH\n\n# In your current terminal, to reload the session\nsource ~/.bash_profile # again, (~/.zshrc if you are on Mac)\n```\n\n### How come my notes aren't being rendered?\nYou probably forgot to include front matter in your Markdown files. You can either setup [Obsidian](notes/obsidian.md) to do this for you or you need to manually define it. More details in [the 'how to edit' guide](notes/editing.md).\n\n### My custom domain isn't working!\nWalk through the steps in [the hosting guide](notes/hosting.md) again. Make sure you wait 30 min to 1 hour for changes to take effect.\n\n### How do I setup analytics?\nQuartz by default uses [Plausible](https://plausible.io/) for analytics. \n\nIf you would prefer to use Google Analytics, you can follow this [guide in the Hugo documentation](https://gohugo.io/templates/internal/#google-analytics). \n\nAlternatively, you can also import your Google Analytics data into Plausible by [following this guide](https://plausible.io/docs/google-analytics-import).\n\n\n### How do I change the content on the home page?\nTo edit the main home page, open `/content/_index.md`.\n\n### How do I change the colours?\nYou can change the theme by editing `assets/custom.scss`. More details on customization and themeing can be found in the [customization guide](notes/config.md).\n\n### How do I add images?\nYou can put images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\n### My Interactive Graph and Backlinks aren't up to date\nBy default, the `linkIndex.json` (which Quartz needs to generate the Interactive Graph and Backlinks) are not regenerated locally. To set that up, see the guide on [local editing](notes/editing.md)\n\n### Can I use React/Vue/some other framework?\nNot out of the box. You could probably make it work by editing `/layouts/_default/single.html` but that's not what Quartz is designed to work with. 99% of things you are trying to do with those frameworks you can accomplish perfectly fine using just vanilla HTML/CSS/JS.\n\n## Still Stuck?\nQuartz isn't perfect! If you're still having troubles, file an issue in the GitHub repo with as much information as you can reasonably provide. Alternatively, you can message me on [Twitter](https://twitter.com/_jzhao) and I'll try to get back to you as soon as I can.\n\n🐛 [Submit an Issue](https://github.com/jackyzha0/quartz/issues)\n","lastmodified":"2023-08-16T12:08:43.591401125Z","tags":[]},"/notes/updating":{"title":"Updating","content":"\nHaven't updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update! This command will show you a log summary of all commits since you last updated, press `q` to acknowledge this. Then, it will show you each change in turn and press `y` to accept the patch or `n` to reject it. Usually you should press `y` for most of these unless it conflicts with existing changes you've made! \n\n```shell\nmake update\n```\n\nOr, if you don't want the interactive parts and just want to force update your local garden (this assumed that you are okay with some of your personalizations been overriden!)\n\n```shell\nmake update-force\n```\n\nOr, manually checkout the changes yourself.\n\n\u003e [!warning] Warning!\n\u003e\n\u003e If you customized the files in `data/`, or anything inside `layouts/`, your customization may be overwritten!\n\u003e Make sure you have a copy of these changes if you don't want to lose them.\n\n\n```shell\n# add Quartz as a remote host\ngit remote add upstream git@github.com:jackyzha0/quartz.git\n\n# index and fetch changes\ngit fetch upstream\ngit checkout -p upstream/hugo -- layouts .github Makefile assets/js assets/styles/base.scss assets/styles/darkmode.scss config.toml data \n```\n","lastmodified":"2023-08-16T12:08:43.591401125Z","tags":[]}}