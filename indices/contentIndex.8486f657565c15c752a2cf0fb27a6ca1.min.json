{"/":{"title":"🪴 Quartz 3.3","content":"\n## [[Week 1]]\n## [[Week 2]]\n\n## [[Week 3]]\n\n## [[Week 4]]","lastmodified":"2023-08-16T11:46:53.974988959Z","tags":[]},"/R-Week-1":{"title":"R Week 1","content":"\n## R Data Structures\n\nWhen we perform data analysis in general we will typically use data in the form of an **analytic base table**. In an **analytic base table**, the **rows** of the table represent different **observations** and the different **variables** reported for each observation defines the **columns**\n\n![[ABT.png]]\n\nUp to now, we have discussed how we can store one value in an **object**. For example:\n\n```{r t1_1, exercise = TRUE, exercise.eval = FALSE}\nlength \u003c- 5 \nwidth \u003c- 10 \narea \u003c- length * width \narea\n```\n\nbut, storing one value in an **object** will only get us that far. We require methods to **import** data from different sources in R,  to **store** the data in R and to **manipulate** the data stored in R. \n\nTutorial 1 will focus on the different **data types** available in R.\n\nWorking with data in R involves selecting a **data structure** to hold your data and (ii) entering or importing the data into the **data structure** identified. R has a wide variety of **objects** available for holding data including **atomic vectors**, **matrices**, **arrays**, **lists** and **data frames**. When an **object** is created with a single value, R will create an **atomic vector** since R does not include a **scalar** data type.\n\n![[DataTypes.png]]\n\n## Data frame\n\nThe **analytic base table** equivalent structure in R is known as a **data frame**\n\nFor now, we will avoid the technical details of a **data frame** and rather focus on the high-level concepts. R includes several built-in data sets, some of the data sets are stored as **data frames**. To load an example data set the **function** data() can be used.   \n\n```{r t1_2, exercise = TRUE, exercise.eval = FALSE}\ndata(mtcars) # loads the data frame into the global environment\n```\n\nWe can view the first 6 observations of the **data frame** *mtcars* using the **function** `head()` or the last 6 observations of the **data frame** *mtcars* using the **function** `tail()`. Try modifying the code below to only display the first four observations of the **dataframe** `mtcars`\n\n```{r t1_3, exercise = TRUE, exercise.eval = FALSE}\nhead(x = mtcars, n = 6) # displays the first six observations\n```\n\n```{r t1_3-hint}\nhead(x = mtcars, n = 4)\n```\n\nThe **function** `str()` can be used to view the **str**ucture of an **object** \n\n```{r t1_4, exercise = TRUE, exercise.eval = FALSE}\nstr(mtcars) \n```\n\nOnce we have a **data frame** it becomes easy to calculate summary statistics, create plots or even analytical models. \n\n**Summary statistics**: The function `summary()` can be used to display the summary statistics of a **data frame**\n\n```{r t1_5, exercise = TRUE, exercise.eval = FALSE}\nsummary(mtcars) \n```\n\n**Plots**: Given a **data frame** various plots can be created, for example a histogram of the variable miles per gallon (mpg) \n\n```{r t1_6, exercise = TRUE, exercise.eval = FALSE}\nhist(mtcars$mpg)\n```\n\n**Analytical model**: Create a linear regression model using the transmission (variable am) as input and miles per gallon (mpg) as output\n\n```{r t1_7, exercise = TRUE, exercise.eval = FALSE}\nlm(mpg~am,data=mtcars)\n```\n\n## Atomic vectors\n\n### Introduction to vectors\n\nThe simplest and most common data structure in R is called a **vector**. There are two types of **vectors** in R: **atomic vectors** and **lists**. The main difference between **atomic vectors** and **lists** is that **atomic vectors** can only store data of the same type, while **lists** can be used to store data of different types. For example, an atomic vector can be used to store the grades achieved by students in this course\n\n![[AVectorExample.png|470]]\n\nVarious **functions** can be used to create **vectors** in R. The most straightforward way to create a **vector** in R is by using the **function** `c()` which stands for **combine** or **concatenate**. For example, a **vector** with four elements can be created and assigned to the object `first_vector`\n\n```{r t2_1, exercise = TRUE, exercise.eval = FALSE}\nfirst_vector \u003c- c(1,  3,  7, -0.5) # create a vector with four elements \nfirst_vector\n```\n\nTry creating a **vector** that contains the values 1,2,3,4:\n\n```{r t2_2, exercise = TRUE, exercise.eval = FALSE}\n \n```\n\n```{r t2_2-hint}\nc(1,2,3,4)\n```\n\nThe **function** `c()` can also be used to combine **vectors** to form a new vector\n\n```{r t2_3, exercise = TRUE, exercise.eval = FALSE}\nc(c(1,  2,  3),  c(4,  5,  6)) # combine the vector c(1,2,3) and c(4,5,6)\n```\n\nGiven a **vector**, it is possible to create a new **vector** where the new **vector** contains repetitions of the elements of the original **vector**. To repeat specific **elements** of a **vector** the function `rep()` which stands for **repetition** can be used\n\n```{r t2_4, exercise = TRUE, exercise.eval = FALSE}\nrep(c(1,  2),  times = 3) # repeat the vector c(1,2) three times\n```\n\nThe above example, repeats the **vector** `c(1,2)` three times. Elements of a vector can also be repeated using the *`each`* **argument** of the **function** `rep()` \n\nModify the code below to produce the **vector** c(1,2,1,2,1,2) using the *`each`* **argument** \n\n```{r t2_5, exercise = TRUE, exercise.eval = FALSE}\nrep(c(1,  2)) \n```\n\n```{r t2_5-hint}\nrep(c(1,  2),  each = 3) \n```\n\nValues can also be passed to both the `each` and `times` **arguments** of the `rep()` **function**. When values are passed to both the `each` and `times` arguments, the `each` operation is performed first. \n\nCreate the vector `c(1,1,1,2,2,2,1,1,1,2,2,2)` by filling in the blanks:\n\n```{r t2_6, exercise = TRUE, exercise.eval = FALSE,  exercise.blanks = \"___\"}\nrep(c(1,2), times = ____, each = ____) \n```\n\n```{r t2_6-solution}\nrep(c(1,2), times = 2, each = 3) \n```\n\nThe function `head()` and `tail()` can be used to obtain a preview of the values stored in a **vector**\n\nR by default includes the **character vectors** `letters` and `LETTERS`. The **vector** `letters` contain the 26 lower-case letters of the Roman alphabet, while the **vector** `LETTERS` contain the 26 upper-case letters of the Roman alphabet\n\n```{r t2_7, exercise = TRUE, exercise.eval = FALSE}\nletter\n```\n\nThe **functions** `head()` and `tail()` can be used to preview the values stored in a **vector**\n\n```{r t2_8, exercise = TRUE, exercise.eval = FALSE}\nhead(letters)\n```\n\n```{r t2_9, exercise = TRUE, exercise.eval = FALSE}\ntail(letters)\n```\n\nDisplay the last four elements of the **vector** `letters` by filling in the blanks:\n\n```{r t2_10, exercise = TRUE, exercise.eval = FALSE,  exercise.blanks = \"___\"}\ntail(letters, n = ___)\n```\n\n```{r t2_10-solution}\ntail(letters, n = 4)\n```\n\n## Type of atomic vectors\n\nThere are six types of **atomic vectors** in R: **logical**, **integer**, **double**, **character**, **complex** and **raw**. **Integer** and **double** **vectors** are collectively known as **numeric vectors**. We will only focus on **logical**, **integer**, **double** and **character** vectors in this course also referred to as the **primary** type of **atomic vectors**\n\n![[TypesofVectors.png|400]]\n\nEach **atomic vector** in R uses a special syntax to define the  **elements** of the  **vector**\n\n**Logical vectors**: can only contain the values (i) `TRUE`  or `T` and (ii)  `FALSE` or `F`\n\n```{r t2_11, exercise = TRUE, exercise.eval = FALSE}\nlogical_vector \u003c- c(T, F, TRUE, FALSE,) # Note TRUE can be abbreviated as T\n```\n\n**Character vectors** contain **elements** of type string. **Strings** are values surrounded single quotation marks `‘’` or double quotation marks `““`\n\n```{r t2_12, exercise = TRUE, exercise.eval = FALSE}\ncharacter_vector \u003c- c(\"Andrew\",  'Mike',  'John',  'Sara')\n```\n\n**Double vectors** can be specified in decimal, scientific or hexadecimal form. **Double vectors** can contain three special values: `Inf` (infinity), `-Inf` (negative infinity) and `NaN` (not a number)\n\n```{r t2_13, exercise = TRUE, exercise.eval = FALSE}\ndouble_vector \u003c- c(1.2,  1.2e3,  0xcafe,  Inf,  NaN)\n```\n\n**Integer vectors** are defined similarly to **double vectors**, but the elements must be followed by `L` and cannot contain fractions \n\n```{r t2_14, exercise = TRUE, exercise.eval = FALSE}\nint_vector \u003c- c(1L,  1.2e3L,  0xcafeL)\n```\n\n**Double vectors** and **integer vectors** are both **numeric vectors**\n\n### Properties of vectors\n\nEach **vector** has three properties: (1) a **type** (2) a **length** and (3) **attributes**: \n\n**Type**: The **type** of a **vector**, how the **object** is internally stored, can be checked using the `typeof()` function. The `typeof()` *function* determines the R internal type or storage mode of any R object \n\n```{r t2_15, exercise = TRUE, exercise.eval = FALSE}\ntypeof(letters) # letters is a builtin character vector\n```\n\n**Length**: The number of **elements** stored in a **vector** can be determined with the **function** `length()`\n\n```{r t2_16, exercise = TRUE, exercise.eval = FALSE}\nlength(letters)\n```\n\n**Attributes**: An **attribute** is a piece of information that can be attached to an **atomic vector** or any R **object**. You can think of **attributes** as `metadata` - a convenient place to store information associated with an **object**. By default an **atomic vector** does not have any **attributes** assigned to it. To display the **attributes** of an **object** the `attribute()` **function** can be used. \n\n```{r t2_17, exercise = TRUE, exercise.eval = FALSE}\nmy_vector \u003c- 1:10\nattributes(my_vector)\n```\n\nThe **object** `my_vector` does not have any **attributes** assigned to it. However, this does not mean that **attributes** cannot be assigned to an **object**. The most common attributes to give an **atomic vector** are **names**, **dimensions** and **classes**. We will only discuss **names** at this point\n\nBy default an **atomic vector** will not have a **names** **attribute** assigned to it. To check whether the **names attribute** is assigned a **vector** the **function** `names()` can be used\n\n```{r t2_18, exercise = TRUE, exercise.eval = FALSE}\nweekly_rainfall = c(10,  12,  0,  4,  0) \nnames(weekly_rainfall)\n```\n\n**Names** can be assigned to a **vector** either when a **vector** is created or using the **function** `names()`\n\n```{r t2_19, exercise = TRUE, exercise.eval = FALSE}\nweekly_rainfall = c(\"Mo\" = 10, \"Tu\" = 12, \"We\" = 0, \"Th\" = 4, \"Fr\" = 0) \nnames(weekly_rainfall) \u003c- c(\"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\")\nattributes(weekly_rainfall)\n```\n\n**Names** will not affect the actual values of the **vector**, nor will the **names** be affected when the **elements** of the **vector** are manipulated\n\nWhen you attempt to create a **vector** with different types, R will “convert” the **elements** to a compatible type of vector \n\nRecall that an **atomic vectors** can only contain **elements** of the same type. If you try to create a **vector** with different elements, R will automatically **coarse** the values to a compatible type in the order:  `logical » integer » double » character`\n\n```{r t2_20, echo=FALSE}\nquiz(question(\"R stores the vector c(TRUE,  1L) as a _ vector\",\n    answer(\"logical\"),\n    answer(\"integer\", correct = TRUE),\n    answer(\"double\"),\n    answer(\"character\"),\n    allow_retry = TRUE))\n```    \n\n```{r t2_21, echo=FALSE}\nquiz(question(\"R stores the vector c(TRUE,  1)) as a _ vector\",\n    answer(\"logical\"),\n    answer(\"integer\"),\n    answer(\"double\", correct = TRUE),\n    answer(\"character\"),\n    allow_retry = TRUE))\n```  \n\n```{r t2_22, echo=FALSE}\nquiz(question(\"R stores the vector typeof(c('a',  1))) as a _ vector\",\n    answer(\"logical\"),\n    answer(\"integer\"),\n    answer(\"double\"),\n    answer(\"character\", correct = TRUE),\n    allow_retry = TRUE))\n```\n\n### Logical vectors\n\n**Logical vectors** can contain the values `TRUE`, `FALSE` and `NA` (for “not” available). Logical vectors are typically a product of performing a logical test, for example: \n\n```{r t2_l1, exercise = TRUE, exercise.eval = FALSE}\nc(1, 2, 3) == 1\n```\n\nThe example above evaluates whether each element in the vector `c(1, 2, 3)` is equal to 1 using the comparison operator `==`. Recall that the `=` operator is reserved for assignment, instead `==` is used to determine equality \n\nR includes all the standard comparison operators : `\u003e` , `\u003e=` , `\u003c` , `\u003c=` , `!=` (not equal) and `==` (equal) \n\n```{r t2_l2, exercise = TRUE, exercise.eval = FALSE}\nc(1, 2, 3) == 1\n```\n\nTo test if two objects are exactly equal the function `identical()` can be used\n\n```{r t2_l3, exercise = TRUE, exercise.eval = FALSE}\nv1 \u003c- c(4, 4, 9, 12) \nv2 \u003c- c(4, 4, 9, 13) \nidentical(v1, v2)\n```\n\n```{r t2_l4, exercise = TRUE, exercise.eval = FALSE}\nv1 \u003c- c(4, 4, 9, 12) \nv2 \u003c- c(4, 4, 9, 12) \nidentical(v1, v2)\n```\n\nSometimes you wish to test for “nearly equal”. The function `all.equal()` test for equality with a tolerance difference of 1.5e-8\n\n```{r t2_l5, exercise = TRUE, exercise.eval = FALSE}\nv1 \u003c- c(4.00000005, 4.00000008) \nv2 \u003c- c(4.00000002, 4.00000006) \nall.equal(v1, v2)\n```\n\nIf the difference is greater than the tolerance level, the mean relative difference is returned\n\n```{r t2_l6, exercise = TRUE, exercise.eval = FALSE}\nv1 \u003c- c(4.0005, 4.0008) \nv2 \u003c- c(4.0002, 4.0006) \nall.equal(v1, v2)\n```\n\nTo evaluate more than one logical expressions the AND `\u0026` operator or the OR `|` operator can be used. For the AND `\u0026` operator both conditions must be `TRUE` to be `TRUE`\n\n```{r t2_l7, exercise = TRUE, exercise.eval = FALSE}\n(3 \u003e 5) \u0026 (4 == 4)\n```\n\nFor the OR `|` operator at least one condition must be `TRUE` to be `TRUE`\n\n```{r t2_l8, exercise = TRUE, exercise.eval = FALSE}\n(3 \u003e 5) | (4 == 4)\n```\n\nLastly a condition can be switched using the NOT `!` operator\n\n```{r t2_l9, exercise = TRUE, exercise.eval = FALSE}\n!(3 \u003e 5)\n```\n\nConsider the following code\n```{r t2_l20, exercise = TRUE, exercise.eval = FALSE}\nresult \u003c- ((111 \u003e= 111) | !(TRUE)) \u0026 ((4 + 1) == 5) # result = TRUE\n```\n\nTo understand the output of the code, run the different parts in the block below. Why is the final output return TRUE?\n\n```{r t2_l21, exercise = TRUE, exercise.eval = FALSE}\n\n```\n\nThe function `%in%` avoids the use of using the OR `|` operator excessively  \n\n```{r t2_l22, exercise = TRUE, exercise.eval = FALSE}\nc(1, 2, 3, 4) %in% c(1, 2)\n```\n\nThe function `which()` can be used to return the indices of elements that evaluate to `TRUE`\n\n```{r t2_l23, exercise = TRUE, exercise.eval = FALSE}\nwhich(c(1, 2, 3, 4) %in% c(1, 2))\n```\n\nMath operations can also be performed with logical vectors, since `TRUE = 1` and `FALSE = 0`\n\n```{r t2_l24, exercise = TRUE, exercise.eval = FALSE}\n(c(1,0,1) == 1) + 1\n```\n\nTypically use cases includes determining the proportion of elements that are **TRUE** of a **logical vector** \n\n```{r t2_l25, exercise = TRUE, exercise.eval = FALSE}\nmean(c(1, 2, 3) == 1)\n```\n\n### Character vectors\n\n**Character vectors** stores data as strings (“text”) and is typically used to store information such as names, addresses and IDs as: \n\n```{r t2_c1, exercise = TRUE, exercise.eval = FALSE}\nfirst_names \u003c- c(\"Andrew\", \"Beth\", \"Carly\", \"Dan\")\n```\n\nString operators can be performed on strings to determine useful properties, such as the length of each string:\n\n```{r t2_c2, exercise = TRUE, exercise.eval = FALSE}\nnchar(first_names)\n```\n\nNote that R uses a global string pool. This means that a unique string is only stored in memory once, reducing the amount of memory required to store duplicate strings\n\n### Numeric vectors\n\n**Numeric Vectors**, rather then using the function `c()`, can also be created with the function `seq()` which stands for sequence. The function `seq()` creates a vector which starts at the value passed to the from argument, in increments of 1, up to the value passed to the to argument. For example, a numeric vector can be created starting from 3 and ending at 10: \n\n```{r t2_n1, exercise = TRUE, exercise.eval = FALSE}\nseq(from = 3,  to = 10)\n```\n\nThe `seq()` function can also be written shorthand using the `:` operator\n\n```{r t2_n2, exercise = TRUE, exercise.eval = FALSE}\n3:10\n```\n\nThe `seq()` function will always try to create an integer vector first, if not possible a double vector will be created\n\nTo create a vector using `seq()` with increments other then 1, a value can be passed to the optional by argument of the function. For example, a vector can be created which starts at 10 up to 0 in increments of -2\n\n```{r t2_n3, exercise = TRUE, exercise.eval = FALSE}\nseq(from = 10, to = 0.2,  by = -2)\n```\n\nIn some cases you want to generate a numeric vector with a specific number of elements between two numbers. To generate a vector with a specific number of elements a value can be passed to the length.out argument of the `seq()` function. For example, a vector of length 10 can be generated as follows:\n\n```{r t2_n4, exercise = TRUE, exercise.eval = FALSE}\nseq(from = 3,  to = 10,  length.out = 10)\n```\n\nWhen performing arithmetic operations on numeric vectors, R perform element-wise operations by default \n\n```{r t2_n5, exercise = TRUE, exercise.eval = FALSE}\nc(1, 2, 3) + c(4, 5, 6) # c(1 + 4, 2 + 5, 3 + 6)\nc(1, 2, 3, 4)^2 # to the power of 2\n```\n\nWhen vectors of different lengths are used, R will recycle the shorter vector by repeating the vector to match the longer vector\n\n```{r t2_n6, exercise = TRUE, exercise.eval = FALSE}\nc(1,  1,  1,  1) * c(1,  2) # c(1*1, 1*2, 1*1, 1*2)\n```\n\nWhen the longer vector is not a multiple of the shorter vectors, R will still perform **recycling**, however a warning will be shown \n\n```{r t2_n7, exercise = TRUE, exercise.eval = FALSE}\nc(1,  1,  1,  1) * c(1,  2,  3) # c(1*1, 1*2, 1*3, 1*1)\n```\n\nSome functions perform operations on an entire vector as oppose to working **element-wise**\n\n```{r t2_n8, exercise = TRUE, exercise.eval = FALSE}\nsum(c(1,2,3,4))\n```\n\n```{r t2_n9, exercise = TRUE, exercise.eval = FALSE}\nmax(c(1,2,3,4))\n```\n\nSome other useful functions includes: `min()` , `median()`, `sd()` and `var()`\n\nSometimes operations will produce `Inf` (positive infinity), `-Inf` (negative infinity) or `NaN` (Not a Number) as a result from a calculation\n\n```{r t2_n10, exercise = TRUE, exercise.eval = FALSE}\nc(-2,  -1,  0,  1,  2)/0\n```\n\nTo determine whether a function is `Inf` or `–Inf` the function `is.infinite()` can be used\n\n```{r t2_n11, exercise = TRUE, exercise.eval = FALSE}\nis.infinite(c(-2, -1, 0,  1,  2)/0)\n```\n\nTo determine whether a function is `NaN` the function `is.nan()` can be used\n\n```{r t2_n12, exercise = TRUE, exercise.eval = FALSE}\nis.na(c(-2, -1,  0,  1,  2)/0)\n```\n\nWe can combine functions to perform common operations on numeric vectors. For instance some models expect all values to be within the range 0 to 1. To convert values to the range 0 to 1, normalisation can be used $X_{normalised} = \\frac{X- X_{min}}{X_{max}-X_{min}}$\n\n```{r t2_n13, exercise = TRUE, exercise.eval = FALSE}\nx \u003c- c(0, 2, 55, 23, 20, 48, 76) \n(x - min(x)) / (max(x) - min(x))\n```\n\n### Subsetting vectors\n\nElements of a vector can be selected, subset, in a several ways. To illustrate subsetting consider the vector\n\n```{r t2_s1, exercise = TRUE, exercise.eval = FALSE}\nfirst_names \u003c- c(\"Andrew\", \"Beth\", \"Carly\", \"Dan\")\n```\n\n**Option 1** Passing a single index or vector of entries to keep using [ ]\n\n```{r t2_s2, exercise = TRUE, exercise.eval = FALSE}\nfirst_names \u003c- c(\"Andrew\", \"Beth\", \"Carly\", \"Dan\")\nfirst_names[c(1,4)]\n```\n\n**Option 2** Passing a single index or vector of entries to drop using [-]\n\n```{r t2_s3, exercise = TRUE, exercise.eval = FALSE}\nfirst_names \u003c- c(\"Andrew\", \"Beth\", \"Carly\", \"Dan\")\nfirst_names[-c(1,4)] # or first_names[c(-1, -4)]\n```\n\n**Option 3** Passing a logical vector of entries to keep (TRUE) and entries to drop (FALSE) using []\n\n```{r t2_s4, exercise = TRUE, exercise.eval = FALSE}\nfirst_names \u003c- c(\"Andrew\", \"Beth\", \"Carly\", \"Dan\")\nfirst_names[nchar(first_names) \u003e 4]\n```\n\nNote that if the logical vector passed is of a different length than the vector to be subset, recycling will be applied\n\n```{r t2_s5, exercise = TRUE, exercise.eval = FALSE}\nfirst_names \u003c- c(\"Andrew\", \"Beth\", \"Carly\", \"Dan\")\nfirst_names[c(TRUE, FALSE)]\n```\n\n**Option 4** Names can be assigned to a vector when a vector is created or using the function `names()`. Once names are defined, names can be used to subset a vector\n\n```{r t2_s6, exercise = TRUE, exercise.eval = FALSE}\nweekly_rainfall = c(\"Mo\" = 10, \"Tu\" = 12, \"We\" = 0, \"Th\" = 4, \"Fr\" = 0) # option 1 \nnames(weekly_rainfall) \u003c- c(\"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\") # option 2 \nweekly_rainfall\nweekly_rainfall[c(\"Mo\", \"Tu\")]\n```\n\n### Missing values\n\nMost data sets will contain missing values. R use the encoding `NA` (not available), without quotes, to represent missing values \n\n```{r t2_m1, exercise = TRUE, exercise.eval = FALSE}\nvector_with_missing \u003c- c(1, 2, 3, NA, 4, 5, 6, NA)\n```\n\nWhen you try to apply operations to vectors with `NA` values, most functions will return an error or simply `NA`\n\n```{r t2_m2, exercise = TRUE, exercise.eval = FALSE}\nmean(vector_with_missing)\n```\n\nIn some functions, the optional argument `na.rm = TRUE` can be used to ignore the `NA` values in calculations\n\n```{r t2_m3, exercise = TRUE, exercise.eval = FALSE}\nmean(vector_with_missing, na.rm = TRUE)\n```\n\nMost operations that involve missing values will simply return a missing value. After all, R has “no idea” what the missing value represents \n\n```{r t2_m4, exercise = TRUE, exercise.eval = FALSE}\nNA \u003e 3\n```\n\nSimilarly testing whether two missing values are equal with return `NA`\n\n```{r t2_m5, exercise = TRUE, exercise.eval = FALSE}\nNA == NA # R has no idea if the two missing values are the same value\n```\n\nWhen the actual value represented by `NA` is not important, R can return a non-NA output\n\n```{r t2_m6, exercise = TRUE, exercise.eval = FALSE}\nNA^0 # returns 1 \nNA | TRUE # return TRUE \nNA \u0026 FALSE # return FALSE\n```\n\nTo test whether a specific element of a vector is missing the `is.na()` function can be used\n\n```{r t2_m7, exercise = TRUE, exercise.eval = FALSE}\nvector_with_missing \u003c- c(1, 2, 3, NA, 4, 5, 6, NA) \nis.na(vector_with_missing)\n```\n\nThe `is.na()` function can also be used to create a subset of a vector that excludes missing values\n\n```{r t2_m8, exercise = TRUE, exercise.eval = FALSE}\nvector_with_missing[!is.na(vector_with_missing)]\n```\n\n## Matrices and Arrays\n\nA **matrix** extends the idea of vectors into two dimensions: rows and columns. A simple way of thinking of a matrix is the simple reordering of the values of a vector into two dimensions where all rows of the matrix are the same length\n\n![[Matrix.png]]\n\nElements of a vector can also be arranged in more than two dimensions, known as an **array**. For example, a colour image is typically represented as a three-dimensional array. As with atomic vectors, all the elements of an array and matrix must be of the same type. \n\n![[Array.png]]\n\n### Creating matrices\n\nA matrix can be directly constructed using the `matrix()` function. The `byrow` argument of the `matrix()` function determines whether the data fill is by row or by column\n\n\n```{r t4_1, exercise = TRUE, exercise.eval = FALSE}\nmatrix(1:9,  nrow = 3) # create a matrix with 3 rows\n```\n\n```{r t4_2, exercise = TRUE, exercise.eval = FALSE}\nmatrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) # create a matrix with 3 rows\n```\n\nR will try to construct a matrix even if it means that elements of the vector used to construct the matrix is repeated or dropped. R will not necessarily show a warning message if elements are repeated or dropped \n\n```{r t4_3, exercise = TRUE, exercise.eval = FALSE}\nmatrix(1:5, nrow = 2)\n```\n\n```{r t4_4, exercise = TRUE, exercise.eval = FALSE}\nmatrix(1:6, nrow = 2, ncol = 2)\n```\n\nA matrix can also be created by binding vectors together with the function `rbind()` which stands for row bind or `cbind()` which stands for column bind \n\n```{r t4_5, exercise = TRUE, exercise.eval = FALSE}\nrbind(c(1, 2, 3), c(4, 5, 6)) # Bind rows to form a matrix\n```\n\n```{r t4_6, exercise = TRUE, exercise.eval = FALSE}\ncbind(c(1, 2), c(3, 4), c(5, 6)) # Bind columns to form a matrix\n```\n\nVectors used to construct a matrix must be of the same length. If vectors of different lengths are provided, R will recycle the elements of the shorter vector(s) \n\n```{r t4_7, exercise = TRUE, exercise.eval = FALSE}\ncbind(c(1, 2), c(3))\n```\n\nAs with atomic vectors, all the elements of a matrix must be of the same type. If a matrix is constructed with elements of different types, R will coarse the elements to the same type \n\n```{r t4_8, exercise = TRUE, exercise.eval = FALSE}\ncbind(c(\"1\", \"2\"), c(3, 4))\n```\n\nThe functions `cbind()` and `rbind()` can also be used to extend existing matrices. Again, keep in mind the length and type of the “added” vectors\n\n```{r t4_9, exercise = TRUE, exercise.eval = FALSE}\nsquare_matrix \u003c- matrix(c(1, 1, 1, 1), nrow = 2) \ncbind(square_matrix, c(2, 2))\n```\n\n```{r t4_10, exercise = TRUE, exercise.eval = FALSE}\nsquare_matrix \u003c- matrix(c(1, 1, 1, 1), nrow = 2) \ncbind(square_matrix, c(\"2\")) # repeat + coarse\n```\n\nThe diagonal of a matrix can be obtained by using the `diag()` function\n\n```{r t4_11, exercise = TRUE, exercise.eval = FALSE}\ndiag(matrix(c(1, 0, 0, 1),  nrow = 2))\n```\n\nThe diag() function can also be used to construct a diagonal matrix, such as the identify matrix\n\n```{r t4_12, exercise = TRUE, exercise.eval = FALSE}\ndiag(x = 1, nrow = 3) # x is used to specify the value that is used to fill the diagonal\n```\n\n### Properties of matrices\n\nRecall that an atomic vector has three properties: (i) a **type**, (ii) a **length** and (iii) **attributes**. A matrix has the same three properties as an atomic vector but includes some unique attributes\n\n**Type**: To verify how a matrix is internally stored, the `typeof()` function can be used\n\n```{r t4_13, exercise = TRUE, exercise.eval = FALSE}\ntypeof(matrix(c(1, 1, 1, 1), nrow = 2))\n```\n\nInternally R simply stores the matrix defined in the example above as “double” \n\n**Length** The number of elements stored in a matrix can be determined with the function `length()`\n\n```{r t4_14, exercise = TRUE, exercise.eval = FALSE}\nlength(matrix(c(1, 1, 1, 1), nrow = 2))\n```\n\n**Attributes**: By default, an atomic vector has no attributes assigned to it \n```{r t4_15, exercise = TRUE, exercise.eval = FALSE}\nmy_vector \u003c- 1:20 \nattributes(my_vector)\n```\n\nTo transform an atomic vector into a matrix or array, the dimension dim() attribute of the vector can be set \n\n```{r t4_16, exercise = TRUE, exercise.eval = FALSE}\ndim(my_vector) \u003c- c(4,5) # rearrange the vector into 4 rows and 5 columns \nmy_vector\n```\n\nTo verify that the “transformed” vector is indeed a matrix the attribute class can be checked\n```{r t4_17, exercise = TRUE, exercise.eval = FALSE}\nmy_vector \u003c- 1:20 \ndim(my_vector) \u003c- c(4, 5) # assign values to the dim() attribute of my_vector\nclass(my_vector)\n```\n\nThe `class` attribute helps us understand the type of R object, while typeof specifies how the object is stored internally\n\n```{r t4_18, exercise = TRUE, exercise.eval = FALSE}\ntypeof(my_vector)\n```\n\nLike vectors, names can be assigned to each element of a matrix. However, it is much more common to assign names to the rows and columns of a matrix. The function rownames() and colnames() can be used to set the names of the rows and columns of a matrix\n\n```{r t4_19, exercise = TRUE, exercise.eval = FALSE}\nnew_hope \u003c- c(461, 314) \nempire_strikes \u003c- c(291, 248) \nreturn_jedi \u003c- c(301, 166) \nbox_office \u003c- rbind(new_hope, empire_strikes, return_jedi) \ntitles \u003c- c(\"A New Hope\", \"The Empire Strikes Back\", \"Return of the Jedi\") \nrownames(box_office) \u003c- titles \nregion \u003c- c(\"US\", \"non-US\") \ncolnames(box_office) \u003c- region \nbox_office\n```\n\nAssume we have three numeric vectors of length two, where each numeric vector represents a Star Wars movie and the elements the US box office revenue and the Non-US box office revenue. We can combine the three numeric vectors using `rbind()` into a matrix box_office \n\n```{r t4_20, exercise = TRUE, exercise.eval = FALSE}\nnew_hope \u003c- c(461, 314) \nempire_strikes \u003c- c(291, 248) \nreturn_jedi \u003c- c(301, 166) \nbox_office \u003c- rbind(new_hope, empire_strikes, return_jedi)\n```\n\nUsing `rbind()` will automatically assign the names of the vectors to the rownames attribute of the matrix box_office\n\n```{r t4_21, exercise = TRUE, exercise.eval = FALSE}\nnew_hope \u003c- c(461, 314) \nempire_strikes \u003c- c(291, 248) \nreturn_jedi \u003c- c(301, 166) \nbox_office \u003c- rbind(new_hope, empire_strikes, return_jedi)\nrownames(box_office)\n```\n\nTo view the attributes assigned to an object the function `attributes()` can be used\n\n```{r t4_22, exercise = TRUE, exercise.eval = FALSE}\nmy_matrix \u003c- matrix(c(1, 1)) \nattributes(my_matrix)\n```\n\n```{r t4_23, exercise = TRUE, exercise.eval = FALSE}\nmy_matrix \u003c- matrix(c(1, 1)) \nrownames(my_matrix) \u003c- c(\"row 1\", \"row 2\" # adds the attribute dimnames\nattributes(my_matrix)\n```\n\n### Matrix calculations\n\nMath operations are performed on matrices entry-wise given that the matrices are of the same dimensions \n\n```{r t4_24, exercise = TRUE, exercise.eval = FALSE}\n(matrix(c(1, 1, 1, 1),  nrow = 2) + matrix(c(1,  1,  1, 1),  nrow = 2)) * 2\n```\n\nHowever, using matrices of different dimensions will result in an error\n\n```{r t4_25, exercise = TRUE, exercise.eval = FALSE}\nmatrix(c(1, 1, 1, 1),  nrow = 2) + matrix(c(1,  1, 1, 1, 1, 1),  nrow = 2) \n```\n\nActual matrix multiplication (not-entry wise) is performed using the %*% operator\n\n```{r t4_26, exercise = TRUE, exercise.eval = FALSE}\nmatrix(c(1, 1, 1, 1),  nrow = 2) %*% matrix(c(2, 2),  nrow = 2) \n```\n\nWhen matrix multiplication is performed with matrices of incompatible dimensions an error will be generate \n\n```{r t4_27, exercise = TRUE, exercise.eval = FALSE}\nmatrix(c(1, 1, 1, 1),  nrow = 2) %*% matrix(c(2, 2),  ncol = 2)\n```\n\nThe transpose of a matrix can be computed using the function `t()` for transpose. Recall that the transpose of a matrix is \n\n```{r t4_28, exercise = TRUE, exercise.eval = FALSE}\ntest_matrix = matrix(1:6,  nrow = 2)\nt(test_matrix)\n```\n\nTo invert a matrix, use the function `solve()`\n\n```{r t4_29, exercise = TRUE, exercise.eval = FALSE}\nmy_matrix \u003c- matrix(c(22, 49, 28, 64), nrow = 2) \nmy_matrix_inv \u003c- solve(my_matrix) \nmy_matrix_inv\n```\n\nNote however if we try to check whether the invert hold, the off-diagonals of the result are not exactly zero \n\n```{r t4_30, exercise = TRUE, exercise.eval = FALSE}\nmy_matrix %*% my_matrix_inv\n```\n\n### Subsetting matrices\n\nA matrix can be subset in a similar way as a vector. Instead of vectors, the index \\[rows, columns] is used:\n\n```{r t4_31, exercise = TRUE, exercise.eval = FALSE}\nchar_matrix \u003c- matrix(letters,  nrow = 2,  ncol = 2) \nchar_matrix\n```\n\n```{r t4_32, exercise = TRUE, exercise.eval = FALSE}\nchar_matrix \u003c- matrix(letters,  nrow = 2,  ncol = 2) \nchar_matrix[2, 2] # subset row 2 column 2\n```\n\n```{r t4_33, exercise = TRUE, exercise.eval = FALSE}\nchar_matrix \u003c- matrix(letters,  nrow = 2,  ncol = 2) \nchar_matrix[, 2] # keep all rows, subset column 2\n```\n\nIf the columns or rows of a matrix has names assigned to it, the rownames or colnames can be used to subset a matrix\n\n```{r t4_34, exercise = TRUE, exercise.eval = FALSE}\ntest_matrix \u003c- matrix(1:6, nrow = 3) \nrow.names(test_matrix) \u003c- c(\"a\", \"b\", \"c\") \ntest_matrix[c(\"a\",\"c\"),]\n```\n\nIn the previous example, we saw that R returns a vector if a matrix ends up having just one row or column after subsetting \n\n```{r t4_35, exercise = TRUE, exercise.eval = FALSE}\nchar_matrix \u003c- matrix(letters,  nrow = 2,  ncol = 2) \nchar_matrix[, 2]\n```\n\nTo prevent the behaviour the optional argument drop should be set to FALSE\n\n```{r t4_36, exercise = TRUE, exercise.eval = FALSE}\nchar_matrix \u003c- matrix(letters,  nrow = 2,  ncol = 2) \nchar_matrix[, 2,  drop = FALSE]\n```\n\n## Lists\n\nA **list** in R can be used to store objects of multiple types. Storing objects of multiple types makes lists extremely versatile. A good analogy is to think of a list as your to-do list: items in your to-do list will likely differ in length, characteristics, and the type of activity that has to be done. For example, we can use a list to store a single value, a numeric vector and a matrix\n\n![[List.png|500]]\n\nThe results of models are often returned as a list; therefore it is critical to understand how to work with lists\n\n### Creating lists\n\nTo create a list the function `list()` can be used\n\n```{r t5_1, exercise = TRUE, exercise.eval = FALSE}\nlist(5,  c(1:4),  matrix(c(1:4),  nrow = 2))\n```\n\n- the value `5` is stored in the first index of the list\n- the numeric vector `c(1:4)` is stored in the second index of the list\n- the matrix `matrix(c(1:4), nrow = 2)` is stored in the third index of the list\n\nlist can contain different data objects of different data types\n\n```{r t5_2, exercise = TRUE, exercise.eval = FALSE}\nmy_list \u003c- list(TRUE, c(1:4), matrix(c(\"a\", \"b\", \"c\", \"d\"), nrow = 2)) \nstr(my_list)\n```\n\nIn the above example, we create a list containing (i) an atomic vector of type logical with a single element, (ii) an atomic vector of type integer with four elements and (iii) a matrix of type character with four elements \n\nLists are very versatile data structures capable of storing any data object. For example, a list can be used to store a list  \n\n```{r t5_3, exercise = TRUE, exercise.eval = FALSE}\nchild_list \u003c- list(TRUE, c(1:4), matrix(c(\"a\", \"b\", \"c\", \"d\"), nrow = 2)) \nparent_list \u003c- list(child_list, c(1:4)) \nstr(parent_list)\n```\n\nIn the above example, we create a list named `parent_list` which stores a list in the first element and an atomic vector in the second element\n\n### Extending lists\n\nIf we try to add an list to an existing list using the function list(), R will add the existing list as an element to the current list\n\n```{r t5_4, exercise = TRUE, exercise.eval = FALSE}\nl1 \u003c- list(1:3, \"a\", c(TRUE, FALSE, TRUE)) \nl2 \u003c- list(l1, c(2.5, 4.2)) \nstr(l2)\n```\n\nTo extend a list with a different list, simply use the function `append()`\n\n```{r t5_5, exercise = TRUE, exercise.eval = FALSE}\nl1 \u003c- list(1:3, \"a\", c(TRUE, FALSE, TRUE)) \nl2 \u003c- append(l1, c(2.5, 4.2)) \nstr(l2)\n```\n\n### Properties of lists\n\nRecall that an atomic vector has three properties: (i) a **type**, (ii) a **length** and (iii) **attributes**. A list has the same three properties as an atomic vector but includes some unique attributes\n\n**Type**: The data type of a list is a list. Recall that a list is a type of vector that R internally store as the data type list \n\n```{r t5_6, exercise = TRUE, exercise.eval = FALSE}\nmy_list = list(first_thing = 55, second_thing = c(60, 42)) \ntypeof(my_list)\n```\n\n**Length**: The length of a list is simply the number of elements in the list\n\n```{r t5_7, exercise = TRUE, exercise.eval = FALSE}\nmy_list = list(first_thing = 55, second_thing = c(60, 42)) \nlength(my_list)\n```\n\n**Attributes**: Like atomic vectors, names can also be assigned to the elements of a list. Names can be assigned to the elements of a list when the list is created or by using the function names() \n\n```{r t5_8, exercise = TRUE, exercise.eval = FALSE}\nmy_list = list(first_thing = 55,  second_thing = c(60,42),  third_thing = c(\"a\",  \"b\")) \nnames(my_list)\n```\n\n```{r t5_9, exercise = TRUE, exercise.eval = FALSE}\nmy_list = list(first_thing = 55,  second_thing = c(60,42),  third_thing = c(\"a\",  \"b\")) \nnames(my_list)\n```\n\n### Subsetting lists\n\nThere are three subsetting operators `[[`, `[` and `$` that can be used to subset a list. When thinking of how to subset a list it is often useful to think of a list as a train where each carriage of the train is an element of the list. Since the elements of a list can be named, the carriages of the train can be assigned names\n\n![[Train.png]]\n\n“If list x is a train (list) carrying objects, then `x[[2]]` is the object in car 2; `x[c(1:2)]` is a train (list) of cars 1-2” - @RLangTip\n\nIn other words, single brackets `[]` is used to select one or more elements from a list as a list, while double brackets `[[]]` are used to select the elements of a list \n\nTo obtain the actual elements stored in a list use double brackets `[[ ]]`\n\n```{r t5_10, exercise = TRUE, exercise.eval = FALSE}\nmy_list \u003c- list(5,  c(1:4),  matrix(c(1:4),  nrow = 2)) \nmy_list[[2]]\n```\n\nWhen single brackets `[ ]` is used to access list elements a list is returned instead \n\n```{r t5_11, exercise = TRUE, exercise.eval = FALSE}\nmy_list \u003c- list(5,  c(1:4),  matrix(c(1:4),  nrow = 2)) \nmy_list[1]\n```\n\nSingle brackets are useful to obtain multiple elements stored in the list, since double brackets cannot be used to select multiple elements from the list\n\n![[List1.png]]\n\n![[List2.png]]\n\nGiven a list with names, the names can be used to select elements of a list either by (i) using the name and double brackets `[[ ]]` or using a `$` followed by the name \n\n```{r t5_12, exercise = TRUE, exercise.eval = FALSE}\nmy_list = list(first_thing = 55,  second_thing = c(60,42),  third_thing = c(\"a\",  \"b\")) \nmy_list[[\"first_thing\"]] # or try my_list$first_thing\n```\n\nSubsetting can be used to extend a list. For example, we can assign an object to an element of a list that does not exist  \n\n```{r t5_13, exercise = TRUE, exercise.eval = FALSE}\nl1 \u003c- list(c(1,1)) \nl1[3] \u003c- TRUE \nstr(l1)\n```\n\nor by adding a new named element\n\n```{r t5_14, exercise = TRUE, exercise.eval = FALSE}\nl1 \u003c- list(c(1,1)) \nl1$\"New element\" \u003c- TRUE \nstr(l1)\n```\n\n## Dataframes\n\nA **data frame** stores data in a **list** of **equal length vectors**. Each **element** of the **list** can be thought of as a column and the **length** of each element of the **list** is the number of rows. Since a data frame consist of a **list**, a data frame can store different types of data i.e. **numeric**, **logical**, **character** … in each column\n\n![[Dataframe.png|540]]\n\n### Creating a data frame\n\nIn most cases, we will create a data frame by importing a data set from an external source. However, data frames can also be created explicitly using the function `data.frame()`. Run the code below to create a data frame with three rows and four columns\n\n\n```{r t6_1, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = 1:3, \n                 col2 = c(\"this\", \"is\", \"text\"), \n                 col3 = c(TRUE, FALSE, TRUE), \n                 col4 = c(2.5, 4.2, pi)) \nstr(df)\n```\n\n- If you do not provide names for the columns of a data frame, R will assign custom column names but it is not recommended. \n- In addition, avoid using duplicate column names\n\nThe elements of a data frame should be of equal length. Try running the code below; you should get an error that the number of rows differs\n\n```{r t6_2, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 2, 3), col2 = c(1, 2))\n```\n\nR will only perform recycling when an atomic vector of length 1 is provided but is best avoided. Note that R will automatically **recycle** the value provided for column 2\n\n```{r t6_3, exercise = TRUE, exercise.eval = FALSE}\ndata.frame(col1 = c(1,2,3), col2 = c(1))\n```\n\nApart from atomic vectors, matrices and lists can be used to construct a data frame, but when lists are used the elements must be of the equal length. \n\n```{r t6_4, exercise = TRUE, exercise.eval = FALSE, exercise.cap = \"Create a data frame from a matrix\"}\ndata.frame(matrix(c(1, 2, 3, 4), nrow = 2, dimnames = list(NULL, c(\"a\", \"b\"))))\n```\n\n```{r t6_5, exercise = TRUE, exercise.eval = FALSE, exercise.cap = \"Create a data frame from a list\"}\ndata.frame(list(\"col1\" = c(1, 2, 3), \"col2\" = c(1, 2, 3)))\n```\n\n### Extending data frames\n\n**Columns**: Columns can be added to a data frame using the function `cbind()`. Note that when using `cbind()` one of the objects being combined must be a data frame otherwise a matrix is created\n\n```{r t6_6, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 2), col2 = c(3, 4)) \ncbind(df, col3 = c(5, 6))\n```\n\n**Rows**: Rows can be added to a data frame using the function `rbind()`. However, when adding rows to a data frame the data type of columns can change. R will **coarse** all values to a compatible data type\n\n```{r t6_7, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 2), col2 = c(3, 4)) \ndf \u003c- rbind(df, c(\"1\", \"2\")) \nstr(df)\n```\n\n### Properties of data frames\n\nAn atomic vector has three properties: (i) a **type**, (ii) a **length** and (iii) **attributes**. A data frame has the same three properties as an atomic vector but includes some unique **attributes**\n\n**Length:** The length of a data frame is the number of columns of the data frame\n\n```{r t6_8, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 2), col2 = c(3, 4)) \nlength(df)\n```\n\n**Data Type:** The data type of a data frame is a list. R stores a data frame as a list with some special conditions\n\n```{r t6_9, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 2), col2 = c(3, 4)) \ntypeof(df)\n```\n\n**Attributes**: Data frames can have additional attributes such as row names and column names \n\n```{r t6_10, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 2), col2 = c(3, 4)) \nattributes(df)\n```\n\nRow names can be added or changed using the function `rownames()`. Column names can be changed using the function `colnames()` or the function `names()`\n\n\n### Subsetting data frames\n\nIf you subset a data frame using a single index \\[columns], a data frame behave like a list and return the selected columns with all rows as a data frame\n\n```{r t6_11, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 1), col2 = c(2, 2), col3 = c(3, 3)) \ndf[1]\n```\n\n```{r t6_12, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 1), col2 = c(2, 2), col3 = c(3, 3)) \ndf[c(\"col1\", \"col3\")]\n```\n\nSince the subsetting of a data frame behave like lists, double brackets [[ ]] or a $ followed by the name of a column can be used to select the elements of the data frame. As with list, the result is returned as the most simplified data type i.e. an atomic vector and not a data frame  \n\n```{r t6_13, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 1), col2 = c(2, 2), col3 = c(3, 3)) \ndf[[\"col1\"]]\n```\n\n```{r t6_14, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 1), col2 = c(2, 2), col3 = c(3, 3)) \ndf$col1\n```\n\nIf you subset a data frame using two vectors i.e. \\[rows, columns], a data frame behaves like a matrix and return the selected rows and columns as the most simplified data structure by default \n\n\n```{r t6_15, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 1), col2 = c(2, 2), col3 = c(3, 3)) \ndf[1, c(1, 2)] # return row 1 and column 1 and 2\n```\n\n```{r t6_16, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 1), col2 = c(2, 2), col3 = c(3, 3)) \ndf[, 1] # returns a vector\n```\n\n```{r t6_17, exercise = TRUE, exercise.eval = FALSE}\ndf \u003c- data.frame(col1 = c(1, 1), col2 = c(2, 2), col3 = c(3, 3)) \ndf[, 1,  drop = FALSE] # returns a data frame\n```\n\nThe rows of a data frame can also be selected using logical vectors. For example, using the built-in data frame cars  \n\n```{r t6_18, exercise = TRUE, exercise.eval = FALSE}\ncars[cars$speed == 24,]\n```\n\n```{r t6_19, exercise = TRUE, exercise.eval = FALSE}\ncars[cars$speed == 24, \"dist\",  drop = FALSE]\n```\n","lastmodified":"2023-08-16T11:46:53.974988959Z","tags":[]},"/notes/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95":{"title":"CJK + Latex Support (测试)","content":"\n## Chinese, Japanese, Korean Support\n几乎在我们意识到之前，我们已经离开了地面。\n\n우리가 그것을 알기도 전에 우리는 땅을 떠났습니다.\n\n私たちがそれを知るほぼ前に、私たちは地面を離れていました。\n\n## Latex\n\nBlock math works with two dollar signs `$$...$$`\n\n$$f(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi$$\n\t\nInline math also works with single dollar signs `$...$`. For example, Euler's identity but inline: $e^{i\\pi} = -1$\n\nAligned equations work quite well:\n\n$$\n\\begin{aligned}\na \u0026= b + c \\\\ \u0026= e + f \\\\\n\\end{aligned}\n$$\n\nAnd matrices\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \\\\\na \u0026 b \u0026 c\n\\end{bmatrix}\n$$\n\n## RTL\nMore information on configuring RTL languages like Arabic in the [config](notes/config.md) page.\n","lastmodified":"2023-08-16T11:46:53.974988959Z","tags":[]},"/notes/callouts":{"title":"Callouts","content":"\n## Callout support\n\nQuartz supports the same Admonition-callout syntax as Obsidian.\n\nThis includes\n- 12 Distinct callout types (each with several aliases)\n- Collapsable callouts\n\nSee [documentation on supported types and syntax here](https://help.obsidian.md/Editing+and+formatting/Callouts).\n\n## Showcase\n\n\u003e [!EXAMPLE] Examples\n\u003e\n\u003e Aliases: example\n\n\u003e [!note] Notes\n\u003e\n\u003e Aliases: note\n\n\u003e [!abstract] Summaries \n\u003e\n\u003e Aliases: abstract, summary, tldr\n\n\u003e [!info] Info \n\u003e\n\u003e Aliases: info, todo\n\n\u003e [!tip] Hint \n\u003e\n\u003e Aliases: tip, hint, important\n\n\u003e [!success] Success \n\u003e\n\u003e Aliases: success, check, done\n\n\u003e [!question] Question \n\u003e\n\u003e Aliases: question, help, faq\n\n\u003e [!warning] Warning \n\u003e\n\u003e Aliases: warning, caution, attention\n\n\u003e [!failure] Failure \n\u003e\n\u003e Aliases: failure, fail, missing\n\n\u003e [!danger] Error\n\u003e\n\u003e Aliases: danger, error\n\n\u003e [!bug] Bug\n\u003e\n\u003e Aliases: bug\n\n\u003e [!quote] Quote\n\u003e\n\u003e Aliases: quote, cite\n","lastmodified":"2023-08-16T11:46:53.974988959Z","tags":[]},"/notes/config":{"title":"Configuration","content":"\n## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml {title=\"data/config.yaml\"}\n# The name to display in the footer\nname: Jacky Zhao\n\n# whether to globally show the table of contents on each page\n# this can be turned off on a per-page basis by adding this to the\n# front-matter of that note\nenableToc: true\n\n# whether to by-default open or close the table of contents on each page\nopenToc: false\n\n# whether to display on-hover link preview cards\nenableLinkPreview: true\n\n# whether to render titles for code blocks\nenableCodeBlockTitle: true \n\n# whether to render copy buttons for code blocks\nenableCodeBlockCopy: true \n\n# whether to render callouts\nenableCallouts: true\n\n# whether to try to process Latex\nenableLatex: true\n\n# whether to enable single-page-app style rendering\n# this prevents flashes of unstyled content and improves\n# smoothness of Quartz. More info in issue #109 on GitHub\nenableSPA: true\n\n# whether to render a footer\nenableFooter: true\n\n# whether backlinks of pages should show the context in which\n# they were mentioned\nenableContextualBacklinks: true\n\n# whether to show a section of recent notes on the home page\nenableRecentNotes: false\n\n# whether to display an 'edit' button next to the last edited field\n# that links to github\nenableGitHubEdit: true\nGitHubLink: https://github.com/jackyzha0/quartz/tree/hugo/content\n\n# whether to render mermaid diagrams\nenableMermaid: true\n\n# whether to use Operand to power semantic search\n# IMPORTANT: replace this API key with your own if you plan on using\n# Operand search!\nsearch:\n  enableSemanticSearch: false\n  operandApiKey: \"REPLACE-WITH-YOUR-OPERAND-API-KEY\"\n  operandIndexId: \"REPLACE-WITH-YOUR-OPERAND-INDEX-ID\"\n\n# page description used for SEO\ndescription:\n  Host your second brain and digital garden for free. Quartz features extremely fast full-text search,\n  Wikilink support, backlinks, local graph, tags, and link previews.\n\n# title of the home page (also for SEO)\npage_title:\n  \"🪴 Quartz 3.3\"\n\n# links to show in the footer\nlinks:\n  - link_name: Twitter\n    link: https://twitter.com/_jzhao\n  - link_name: Github\n    link: https://github.com/jackyzha0\n```\n\n### Code Block Titles\nTo add code block titles with Quartz:\n\n1. Ensure that code block titles are enabled in Quartz's configuration:\n\n    ```yaml {title=\"data/config.yaml\", linenos=false}\n    enableCodeBlockTitle: true\n    ```\n\n2. Add the `title` attribute to the desired [code block\n   fence](https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences):\n\n      ```markdown {linenos=false}\n       ```yaml {title=\"data/config.yaml\"}\n       enableCodeBlockTitle: true  # example from step 1\n       ```\n      ```\n\n**Note** that if `{title=\u003cmy-title\u003e}` is included, and code block titles are not\nenabled, no errors will occur, and the title attribute will be ignored.\n\n### HTML Favicons\nIf you would like to customize the favicons of your Quartz-based website, you \ncan add them to the `data/config.yaml` file. The **default** without any set \n`favicon` key is:\n\n```html {title=\"layouts/partials/head.html\", linenostart=15}\n\u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n```\n\nThe default can be overridden by defining a value to the `favicon` key in your \n`data/config.yaml` file. For example, here is a `List[Dictionary]` example format, which is\nequivalent to the default:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon:\n  - { rel: \"shortcut icon\", href: \"icon.png\", type: \"image/png\" }\n#  - { ... } # Repeat for each additional favicon you want to add\n```\n\nIn this format, the keys are identical to their HTML representations.\n\nIf you plan to add multiple favicons generated by a website (see list below), it\nmay be easier to define it as HTML. Here is an example which appends the \n**Apple touch icon** to Quartz's default favicon:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon: |\n  \u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n  \u003clink rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\"\u003e\n```\n\nThis second favicon will now be used as a web page icon when someone adds your \nwebpage to the home screen of their Apple device. If you are interested in more \ninformation about the current and past standards of favicons, you can read \n[this article](https://www.emergeinteractive.com/insights/detail/the-essentials-of-favicons/).\n\n**Note** that all generated favicon paths, defined by the `href` \nattribute, are relative to the `static/` directory.\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml {title=\"data/graphConfig.yaml\"}\n# if true, a Global Graph will be shown on home page with full width, no backlink.\n# A different set of Local Graphs will be shown on sub pages.\n# if false, Local Graph will be default on every page as usual\nenableGlobalGraph: false\n\n### Local Graph ###\nlocalGraph:\n    # whether automatically generate a legend\n    enableLegend: false\n    \n    # whether to allow dragging nodes in the graph\n    enableDrag: true\n    \n    # whether to allow zooming and panning the graph\n    enableZoom: true\n    \n    # how many neighbours of the current node to show (-1 is all nodes)\n    depth: 1\n    \n    # initial zoom factor of the graph\n    scale: 1.2\n    \n    # how strongly nodes should repel each other\n    repelForce: 2\n\n    # how strongly should nodes be attracted to the center of gravity\n    centerForce: 1\n\n    # what the default link length should be\n    linkDistance: 1\n    \n    # how big the node labels should be\n    fontSize: 0.6\n    \n    # scale at which to start fading the labes on nodes\n    opacityScale: 3\n\n### Global Graph ###\nglobalGraph:\n\t# same settings as above\n\n### For all graphs ###\n# colour specific nodes path off of their path\npaths:\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Language Support\n[CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'مدونتي'\n    weight = 1\n```\n","lastmodified":"2023-08-16T11:46:53.974988959Z","tags":["setup"]},"/notes/custom-Domain":{"title":"Custom Domain","content":"\n### Registrar\nThis step is only applicable if you are using a **custom domain**! If you are using a `\u003cYOUR-USERNAME\u003e.github.io` domain, you can skip this step.\n\nFor this last bit to take effect, you also need to create a CNAME record with the DNS provider you register your domain with (i.e. NameCheap, Google Domains).\n\nGitHub has some [documentation on this](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site), but the tldr; is to\n\n1. Go to your forked repository (`github.com/\u003cYOUR-GITHUB-USERNAME\u003e/quartz`) settings page and go to the Pages tab. Under \"Custom domain\", type your custom domain, then click **Save**.\n2. Go to your DNS Provider and create a CNAME record that points from your domain to `\u003cYOUR-GITHUB-USERNAME.github.io.` (yes, with the trailing period).\n\n\t![Example Configuration for Quartz](/notes/images/google-domains.png)*Example Configuration for Quartz*\n3. Wait 30 minutes to an hour for the network changes to kick in.\n4. Done!","lastmodified":"2023-08-16T11:46:53.974988959Z","tags":[]},"/notes/docker":{"title":"Hosting with Docker","content":"\nIf you want to host Quartz on a machine without using a webpage hosting service, it may be easier to [install Docker Compose](https://docs.docker.com/compose/install/) and follow the instructions below than to [install Quartz's dependencies manually](notes/preview%20changes.md).\n## Hosting Quartz Locally\nYou can serve Quartz locally at `http://localhost:1313` with the following script, replacing `/path/to/quartz` with the \nactual path to your Quartz folder.\n\ndocker-compose.yml\n```\nservices:\n  quartz-hugo:\n    image: ghcr.io/jackyzha0/quartz:hugo\n    container_name: quartz-hugo\n    volumes:\n      - /path/to/quartz:/quartz\n    ports:\n      - 1313:1313\n\n    # optional\n    environment:\n      - HUGO_BIND=0.0.0.0\n      - HUGO_BASEURL=http://localhost\n      - HUGO_PORT=1313\n      - HUGO_APPENDPORT=true\n      - HUGO_LIVERELOADPORT=-1\n```\n\nThen run with: `docker-compose up -d` in the same directory as your `docker-compose.yml` file.\n\nWhile the container is running, you can update the `quartz` fork with: `docker exec -it quartz-hugo make update`.\n\n## Exposing Your Container to the Internet\n\n### To Your Public IP Address with Port Forwarding (insecure)\n\nAssuming you are already familiar with [port forwarding](https://en.wikipedia.org/wiki/Port_forwarding) and [setting it up with your router model](https://portforward.com):\n\n1. You should set the environment variable `HUGO_BASEURL=http://your-public-ip` and then start your container.\n2. Set up port forwarding on your router from port `p` to `your-local-ip:1313`.\n3. You should now be able to access Quartz from outside your local network at `http://your-public-ip:p`.\n\nHowever, your HTTP connection will be unencrypted and **this method is not secure**.\n\n### To a Domain using Cloudflare Proxy\n\n1. Port forward 443 (HTTPS) from your machine.\n2. Buy a custom domain (say, `your-domain.com`) from [Cloudflare](https://www.cloudflare.com/products/registrar/). Point a DNS A record from `your-domain.com` to your public IP address and enable the proxy.\n3. Set the environment variables `HUGO_BASEURL=https://your-domain.com`, `HUGO_PORT=443`, and `HUGO_APPENDPORT=false`. Change `1313:1313` to `443:443` for the `ports` in `docker-compose.yml`.\n4. Spin up your Quartz container and enjoy it at `https://your-domain.com`!\n\n### To a Domain using a Reverse Proxy\n\nIf you want to serve more than just Quartz to the internet on this machine (or don't want to use the Cloudflare registrar and proxy), you should follow the steps in the section above (as appropriate) and also set up a reverse proxy, like [Traefik](https://doc.traefik.io/traefik). Be sure to configure your TLS certificates too!\n","lastmodified":"2023-08-16T11:46:53.974988959Z","tags":["setup"]},"/notes/editing":{"title":"Editing Content in Quartz","content":"\n## Editing \nQuartz runs on top of [Hugo](https://gohugo.io/) so all notes are written in [Markdown](https://www.markdownguide.org/getting-started/).\n\n### Folder Structure\nHere's a rough overview of what's what.\n\n**All content in your garden can found in the `/content` folder.** To make edits, you can open any of the files and make changes directly and save it. You can organize content into any folder you'd like.\n\n**To edit the main home page, open `/content/_index.md`.**\n\n### Front Matter\nHugo is picky when it comes to metadata for files. Make sure that your title is double-quoted and that you have a title defined at the top of your file like so, otherwise the generated page will not have a title!\n\nYou can also add tags here as well.\n\n```yaml\n---\ntitle: \"Example Title\"\ntags:\n- example-tag\n---\n\nRest of your content here...\n```\n\n### Obsidian\nI recommend using [Obsidian](http://obsidian.md/) as a way to edit and grow your digital garden. It comes with a really nice editor and graphical interface to preview all of your local files.\n\nThis step is **highly recommended**.\n\n\u003e 🔗 Step 3: [How to setup your Obsidian Vault to work with Quartz](notes/obsidian.md)\n\n## Previewing Changes\nThis step is purely optional and mostly for those who want to see the published version of their digital garden locally before opening it up to the internet. This is *highly recommended* but not required.\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)\n\nFor those who like to live life more on the edge, viewing the garden through Obsidian gets you pretty close to the real thing.\n\n## Publishing Changes\nNow that you know the basics of managing your digital garden using Quartz, you can publish it to the internet!\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2023-08-16T11:46:53.974988959Z","tags":["setup"]},"/notes/hosting":{"title":"Deploying Quartz to the Web","content":"\n## Hosting on GitHub Pages\nQuartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.\n\n### Enable GitHub Actions Permissions\nBy default, GitHub disables workflows from modifying your files (for good reason!). However, Quartz needs this to write the actual site files back to GitHub.\n\nHead to `Settings \u003e Action \u003e General \u003e Workflow Permissions` and choose `Read and Write Permissions`\n\n![[notes/images/github-actions.png]]\n*Enable GitHub Actions*\n\n### Enable GitHub Pages\n\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\n\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\n2. Set a custom domain here if you have one!\n\n![Enable GitHub Pages](/notes/images/github-pages.png)*Enable GitHub Pages*\n\n### Pushing Changes\nTo see your changes on the internet, we need to push it them to GitHub. Quartz is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\n\n```shell\n# Navigate to Quartz folder\ncd \u003cpath-to-quartz\u003e\n\n# Commit all changes\ngit add .\ngit commit -m \"message describing changes\"\n\n# Push to GitHub to update site\ngit push origin hugo\n```\n\nNote: we specifically push to the `hugo` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `master` branch for redeployment.\n\n### Setting up the Site\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to subdomain your Quartz? That's easy too.\n\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`. \n\nMake sure that your `baseURL` has a trailing `/`!\n\n[Reference `config.toml` here](https://github.com/jackyzha0/quartz/blob/hugo/config.toml)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz`), include the trailing `/`. **You need to do this especially if you are using GitHub!**\n\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\n\nPlease note that the `cname` field should *not* have any path `e.g. end with /quartz` or have a trailing `/`.\n\n[Reference `deploy.yaml` here](https://github.com/jackyzha0/quartz/blob/hugo/.github/workflows/deploy.yaml)\n\n```yaml {title=\".github/workflows/deploy.yaml\"}\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\nHave a custom domain? [Learn how to set it up with Quartz ](notes/custom%20Domain.md).\n\n### Ignoring Files\nOnly want to publish a subset of all of your notes? Don't worry, Quartz makes this a simple two-step process.\n\n❌ [Excluding pages from being published](notes/ignore%20notes.md)\n\n## Docker Support\nIf you don't want to use a hosting service, you can host using [Docker](notes/docker.md) instead!\nI would *not use this method* unless you know what you are doing.\n\n---\n\nNow that your Quartz is live, let's figure out how to make Quartz really *yours*!\n\n\u003e Step 6: 🎨 [Customizing Quartz](notes/config.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2023-08-16T11:46:53.974988959Z","tags":["setup"]},"/notes/ignore-notes":{"title":"Ignoring Notes","content":"\n### Quartz Ignore\nEdit `ignoreFiles` in `config.toml` to include paths you'd like to exclude from being rendered.\n\n```toml\n...\nignoreFiles = [  \n    \"/content/templates/*\",  \n    \"/content/private/*\", \n    \"\u003cyour path here\u003e\"\n]\n```\n\n`ignoreFiles` supports the use of Regular Expressions (RegEx) so you can ignore patterns as well (e.g. ignoring all `.png`s by doing `\\\\.png$`).\nTo ignore a specific file, you can also add the tag `draft: true` to the frontmatter of a note.\n\n```markdown\n---\ntitle: Some Private Note\ndraft: true\n---\n...\n```\n\nMore details in [Hugo's documentation](https://gohugo.io/getting-started/configuration/#ignore-content-and-data-files-when-rendering).\n\n### Global Ignore\nHowever, just adding to the `ignoreFiles` will only prevent the page from being access through Quartz. If you want to prevent the file from being pushed to GitHub (for example if you have a public repository), you need to also add the path to the `.gitignore` file at the root of the repository.","lastmodified":"2023-08-16T11:46:53.974988959Z","tags":[]},"/notes/obsidian":{"title":"Obsidian Vault Integration","content":"\n## Setup\nObsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.\n\n### New Vault\nIf you don't have an existing Vault, [download Obsidian](https://obsidian.md/) and create a new Vault in the `/content` folder that you created and cloned during the [setup](notes/setup.md) step.\n\n### Linking an existing Vault\nThe easiest way to use an existing Vault is to copy all of your files (directory and hierarchies intact) into the `/content` folder.\n\n## Settings\nGreat, now that you have your Obsidian linked to your Quartz, let's fix some settings so that they play well.\n\nOpen Settings \u003e Files \u0026 Links and look for these two items:\n\n1. Set the **New link format** to **Absolute Path in vault**. If you have a completely flat vault (no folders), this step isn't necessary.\n2. Turn **on** the **Automatically update internal links** setting.\n\n\n![[notes/images/obsidian-settings.png]]*Obsidian Settings*\n\n## Templates\nInserting front matter everytime you want to create a new Note gets annoying really quickly. Luckily, Obsidian supports templates which makes inserting new content really easily.\n\n\u003e [!WARNING]\n\u003e \n\u003e **If you decide to overwrite the `/content` folder completely, don't remove the `/content/templates` folder!**\n\nHead over to Options \u003e Core Plugins and enable the Templates plugin. Then go to Options \u003e Hotkeys and set a hotkey for 'Insert Template' (I recommend `[cmd]+T`). That way, when you create a new note, you can just press the hotkey for a new template and be ready to go!\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)\n","lastmodified":"2023-08-16T11:46:53.978988997Z","tags":["setup"]},"/notes/philosophy":{"title":"Quartz Philosophy","content":"\n\u003e “[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.” — Richard Hamming\n\n## Why Quartz?\nHosting a public digital garden isn't easy. There are an overwhelming number of tutorials, resources, and guides for tools like [Notion](https://www.notion.so/), [Roam](https://roamresearch.com/), and [Obsidian](https://obsidian.md/), yet none of them have super easy to use *free* tools to publish that garden to the world.\n\nI've personally found that\n1. It's nice to access notes from anywhere\n2. Having a public digital garden invites open conversations\n3. It makes keeping personal notes and knowledge *playful and fun*\n\nI was really inspired by [Bianca](https://garden.bianca.digital/) and [Joel](https://joelhooks.com/digital-garden)'s digital gardens and wanted to try making my own.\n\n**The goal of Quartz is to make hosting your own public digital garden free and simple.** You don't even need your own website. Quartz does all of that for you and gives your own little corner of the internet.\n","lastmodified":"2023-08-16T11:46:53.978988997Z","tags":[]},"/notes/preview-changes":{"title":"Preview Changes","content":"\nIf you'd like to preview what your Quartz site looks like before deploying it to the internet, the following\ninstructions guide you through installing the proper dependencies to run it locally.\n\n\n## Install `hugo-obsidian`\nThis step will generate the list of backlinks for Hugo to parse. Ensure you have [Go](https://golang.org/doc/install) (\u003e= 1.16) installed.\n\n```bash\n# Install and link `hugo-obsidian` locally\ngo install github.com/jackyzha0/hugo-obsidian@latest\n```\n\nIf you are running into an error saying that `command not found: hugo-obsidian`, make sure you set your `GOPATH` correctly (see [[notes/troubleshooting#`command not found: hugo-obsidian`|the troubleshooting page]])! This will allow your terminal to correctly recognize hugo-obsidian as an executable.\n\n##  Installing Hugo\nHugo is the static site generator that powers Quartz. [Install Hugo with \"extended\" Sass/SCSS version](https://gohugo.io/getting-started/installing/) first. Then,\n\n```bash\n# Navigate to your local Quartz folder\ncd \u003clocation-of-your-local-quartz\u003e\n\n# Start local server\nmake serve\n\n# View your site in a browser at http://localhost:1313/\n```\n\n\u003e [!INFO] Docker Support\n\u003e\n\u003e If you have the Docker CLI installed already, you can avoid installing `hugo-obsidian` and `hugo`. Instead, open your terminal, navigate to your folder with Quartz and run `make docker`\n\nAfterwards, start the Hugo server as shown above and your local backlinks and interactive graph should be populated! Now, let's get it hosted online.\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)\n","lastmodified":"2023-08-16T11:46:53.978988997Z","tags":["setup"]},"/notes/search":{"title":"Search","content":"\nQuartz supports two modes of searching through content.\n\n## Full-text\nFull-text search is the default in Quartz. It produces results that *exactly* match the search query. This is easier to setup but usually produces lower quality matches.\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nenableSemanticSearch: false\n```\n\n## Natural Language\nNatural language search is powered by [Operand](https://beta.operand.ai/). It understands language like a person does and finds results that best match user intent. In this sense, it is closer to how Google Search works.\n\nNatural language search tends to produce higher quality results than full-text search.\n\nHere's how to set it up.\n\n1. Login or Register for a new Operand account. Click the verification link sent to your email, and you'll be redirected to the dashboard. (Note) You do not need to enter a credit card to create an account, or get started with the Operand API. The first $10 of usage each month is free. To learn more, see pricing. If you go over your free quota, we'll (politely) reach out and ask you to configure billing.\n2. Create your first index. On the dashboard, under \"Indexes\", enter the name and description of your index, and click \"Create Index\". Note down the ID of the index (obtained by clicking on the index name in the list of indexes), as you'll need it in the next step. IDs are unique to each index, and look something like `uqv1duxxbdxu`.\n3. Click into the index you've created. Under \"Index Something\", select \"SITEMAP\" from the dropdown and click \"Add Source\".\n4. For the \"Sitemap.xml URL\", put your deployed site's base URL followed by `sitemap.xml`. For example, for `quartz.jzhao.xyz`, put `https://quartz.jzhao.xyz/sitemap.xml`. Leave the URL Regex empty. \n5. Get your API key. On the dashboard, under \"API Keys\", you can manage your API keys. If you don't already have an API key, click \"Create API Key\". You'll need this for the next step.\n6. Open `data/config.yaml`. Set `enableSemanticSearch` to `true`, `operandApiKey` to your copied key, and `operandIndexId` to the ID of the index we created from earlier..\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nsearch:\n  enableSemanticSearch: true\n  operandApiKey: \"jp9k5hudse2a828z98kxd6z3payi8u90rnjf\"\n  operandIndexId: \"s0kf3bd6tldw\"\n```\n7. Push your changes to the site and wait for it to deploy.\n8. Check the Operand dashboard and wait for your site to index. Enjoy natural language search powered by Operand!\n","lastmodified":"2023-08-16T11:46:53.978988997Z","tags":[]},"/notes/setup":{"title":"Setup","content":"\n## Making your own Quartz\nSetting up Quartz requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\n\n### Forking\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nNavigate to the GitHub repository for the Quartz project:\n\n📁 [Quartz Repository](https://github.com/jackyzha0/quartz)\n\nThen, Fork the repository into your own GitHub account. **Make sure that when you fork, you _uncheck_ the 'Copy the `hugo` branch only' option**.\n\nIf you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\n\n![[notes/images/fork.png]]\n\n### Cloning\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command in your terminal replacing `YOUR-USERNAME` with your GitHub username.\n\n```shell\ngit clone https://github.com/YOUR-USERNAME/quartz\n```\n\n## Editing\nGreat! Now you have everything you need to start editing and growing your digital garden. If you're ready to start writing content already, check out the recommended flow for editing notes in Quartz.\n\n\u003e ✏️ Step 2: [Editing Notes in Quartz](notes/editing.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2023-08-16T11:46:53.978988997Z","tags":["setup"]},"/notes/showcase":{"title":"Showcase","content":"\nWant to see what Quartz can do? Here are some cool community gardens :)\n\n- [Quartz Documentation (this site!)](https://quartz.jzhao.xyz/)\n- [Jacky Zhao's Garden](https://jzhao.xyz/)\n- [Scaling Synthesis - A hypertext research notebook](https://scalingsynthesis.com/)\n- [AWAGMI Intern Notes](https://notes.awagmi.xyz/)\n- [Shihyu's PKM](https://shihyuho.github.io/pkm/)\n- [SlRvb's Site](https://slrvb.github.io/Site/)\n- [Course notes for Information Technology Advanced Theory](https://a2itnotes.github.io/quartz/)\n- [Brandon Boswell's Garden](https://brandonkboswell.com)\n- [Siyang's Courtyard](https://siyangsun.github.io/courtyard/)\n- [Data Dictionary 🧠](https://glossary.airbyte.com/)\n- [sspaeti.com's Second Brain](https://brain.sspaeti.com/)\n- [oldwinterの数字花园](https://garden.oldwinter.top/)\n- [SethMB Work](https://sethmb.xyz/)\n- [Abhijeet's Math Wiki](https://abhmul.github.io/quartz/Math-Wiki/)\n- [Mike's AI Garden 🤖🪴](https://mwalton.me/)\n\nIf you want to see your own on here, submit a [Pull Request adding yourself to this file](https://github.com/jackyzha0/quartz/blob/hugo/content/notes/showcase.md)!\n","lastmodified":"2023-08-16T11:46:53.978988997Z","tags":[]},"/notes/troubleshooting":{"title":"Troubleshooting and FAQ","content":"\nStill having trouble? Here are a list of common questions and problems people encounter when installing Quartz.\n\nWhile you're here, join our [Discord](https://discord.gg/cRFFHYye7t) :)\n\n### Does Quartz have Latex support?\nYes! See [CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) for a brief demo.\n\n### Can I use \\\u003cObsidian Plugin\\\u003e in Quartz?\nUnless it produces direct Markdown output in the file, no. There currently is no way to bundle plugin code with Quartz.\n\nThe easiest way would be to add your own HTML partial that supports the functionality you are looking for.\n\n### My GitHub pages is just showing the README and not Quartz\nMake sure you set the source to deploy from `master` (and not `hugo`) using `/ (root)`! See more in the [hosting](/notes/hosting) guide\n\n### Some of my pages have 'January 1, 0001' as the last modified date\nThis is a problem caused by `git` treating files as case-insensitive by default and some of your posts probably have capitalized file names. You can turn this off in your Quartz by running this command.\n\n```shell\n# in the root of your Quartz (same folder as config.toml)\ngit config core.ignorecase true\n\n# or globally (not recommended)\ngit config --global core.ignorecase true\n```\n\n### Can I publish only a subset of my pages?\nYes! Quartz makes selective publishing really easy. Heres a guide on [excluding pages from being published](notes/ignore%20notes.md).\n\n### Can I host this myself and not on GitHub Pages?\nYes! All built files can be found under `/public` in the `master` branch. More details under [hosting](notes/hosting.md).\n\n### `command not found: hugo-obsidian`\nMake sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize `hugo-obsidian` as an executable.\n\n```shell\n# Add the following 2 lines to your ~/.bash_profile (~/.zshrc if you are on Mac)\nexport GOPATH=/Users/$USER/go\nexport PATH=$GOPATH/bin:$PATH\n\n# In your current terminal, to reload the session\nsource ~/.bash_profile # again, (~/.zshrc if you are on Mac)\n```\n\n### How come my notes aren't being rendered?\nYou probably forgot to include front matter in your Markdown files. You can either setup [Obsidian](notes/obsidian.md) to do this for you or you need to manually define it. More details in [the 'how to edit' guide](notes/editing.md).\n\n### My custom domain isn't working!\nWalk through the steps in [the hosting guide](notes/hosting.md) again. Make sure you wait 30 min to 1 hour for changes to take effect.\n\n### How do I setup analytics?\nQuartz by default uses [Plausible](https://plausible.io/) for analytics. \n\nIf you would prefer to use Google Analytics, you can follow this [guide in the Hugo documentation](https://gohugo.io/templates/internal/#google-analytics). \n\nAlternatively, you can also import your Google Analytics data into Plausible by [following this guide](https://plausible.io/docs/google-analytics-import).\n\n\n### How do I change the content on the home page?\nTo edit the main home page, open `/content/_index.md`.\n\n### How do I change the colours?\nYou can change the theme by editing `assets/custom.scss`. More details on customization and themeing can be found in the [customization guide](notes/config.md).\n\n### How do I add images?\nYou can put images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\n### My Interactive Graph and Backlinks aren't up to date\nBy default, the `linkIndex.json` (which Quartz needs to generate the Interactive Graph and Backlinks) are not regenerated locally. To set that up, see the guide on [local editing](notes/editing.md)\n\n### Can I use React/Vue/some other framework?\nNot out of the box. You could probably make it work by editing `/layouts/_default/single.html` but that's not what Quartz is designed to work with. 99% of things you are trying to do with those frameworks you can accomplish perfectly fine using just vanilla HTML/CSS/JS.\n\n## Still Stuck?\nQuartz isn't perfect! If you're still having troubles, file an issue in the GitHub repo with as much information as you can reasonably provide. Alternatively, you can message me on [Twitter](https://twitter.com/_jzhao) and I'll try to get back to you as soon as I can.\n\n🐛 [Submit an Issue](https://github.com/jackyzha0/quartz/issues)\n","lastmodified":"2023-08-16T11:46:53.978988997Z","tags":[]},"/notes/updating":{"title":"Updating","content":"\nHaven't updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update! This command will show you a log summary of all commits since you last updated, press `q` to acknowledge this. Then, it will show you each change in turn and press `y` to accept the patch or `n` to reject it. Usually you should press `y` for most of these unless it conflicts with existing changes you've made! \n\n```shell\nmake update\n```\n\nOr, if you don't want the interactive parts and just want to force update your local garden (this assumed that you are okay with some of your personalizations been overriden!)\n\n```shell\nmake update-force\n```\n\nOr, manually checkout the changes yourself.\n\n\u003e [!warning] Warning!\n\u003e\n\u003e If you customized the files in `data/`, or anything inside `layouts/`, your customization may be overwritten!\n\u003e Make sure you have a copy of these changes if you don't want to lose them.\n\n\n```shell\n# add Quartz as a remote host\ngit remote add upstream git@github.com:jackyzha0/quartz.git\n\n# index and fetch changes\ngit fetch upstream\ngit checkout -p upstream/hugo -- layouts .github Makefile assets/js assets/styles/base.scss assets/styles/darkmode.scss config.toml data \n```\n","lastmodified":"2023-08-16T11:46:53.978988997Z","tags":[]}}